/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the DocumentBreakdownDataComparisonBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentBreakdownDataComparisonBreakdown{}

// DocumentBreakdownDataComparisonBreakdown struct for DocumentBreakdownDataComparisonBreakdown
type DocumentBreakdownDataComparisonBreakdown struct {
	IssuingCountry  *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"issuing_country,omitempty"`
	Gender          *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"gender,omitempty"`
	DateOfExpiry    *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"date_of_expiry,omitempty"`
	LastName        *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"last_name,omitempty"`
	DocumentType    *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"document_type,omitempty"`
	DocumentNumbers *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"document_numbers,omitempty"`
	FirstName       *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"first_name,omitempty"`
	DateOfBirth     *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"date_of_birth,omitempty"`
}

// NewDocumentBreakdownDataComparisonBreakdown instantiates a new DocumentBreakdownDataComparisonBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentBreakdownDataComparisonBreakdown() *DocumentBreakdownDataComparisonBreakdown {
	this := DocumentBreakdownDataComparisonBreakdown{}
	return &this
}

// NewDocumentBreakdownDataComparisonBreakdownWithDefaults instantiates a new DocumentBreakdownDataComparisonBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentBreakdownDataComparisonBreakdownWithDefaults() *DocumentBreakdownDataComparisonBreakdown {
	this := DocumentBreakdownDataComparisonBreakdown{}
	return &this
}

// GetIssuingCountry returns the IssuingCountry field value if set, zero value otherwise.
func (o *DocumentBreakdownDataComparisonBreakdown) GetIssuingCountry() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.IssuingCountry) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.IssuingCountry
}

// GetIssuingCountryOk returns a tuple with the IssuingCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) GetIssuingCountryOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.IssuingCountry) {
		return nil, false
	}
	return o.IssuingCountry, true
}

// HasIssuingCountry returns a boolean if a field has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) HasIssuingCountry() bool {
	if o != nil && !IsNil(o.IssuingCountry) {
		return true
	}

	return false
}

// SetIssuingCountry gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the IssuingCountry field.
func (o *DocumentBreakdownDataComparisonBreakdown) SetIssuingCountry(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.IssuingCountry = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *DocumentBreakdownDataComparisonBreakdown) GetGender() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.Gender) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) GetGenderOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the Gender field.
func (o *DocumentBreakdownDataComparisonBreakdown) SetGender(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.Gender = &v
}

// GetDateOfExpiry returns the DateOfExpiry field value if set, zero value otherwise.
func (o *DocumentBreakdownDataComparisonBreakdown) GetDateOfExpiry() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.DateOfExpiry) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.DateOfExpiry
}

// GetDateOfExpiryOk returns a tuple with the DateOfExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) GetDateOfExpiryOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.DateOfExpiry) {
		return nil, false
	}
	return o.DateOfExpiry, true
}

// HasDateOfExpiry returns a boolean if a field has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) HasDateOfExpiry() bool {
	if o != nil && !IsNil(o.DateOfExpiry) {
		return true
	}

	return false
}

// SetDateOfExpiry gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the DateOfExpiry field.
func (o *DocumentBreakdownDataComparisonBreakdown) SetDateOfExpiry(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.DateOfExpiry = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *DocumentBreakdownDataComparisonBreakdown) GetLastName() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.LastName) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) GetLastNameOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the LastName field.
func (o *DocumentBreakdownDataComparisonBreakdown) SetLastName(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.LastName = &v
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise.
func (o *DocumentBreakdownDataComparisonBreakdown) GetDocumentType() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.DocumentType) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) GetDocumentTypeOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.DocumentType) {
		return nil, false
	}
	return o.DocumentType, true
}

// HasDocumentType returns a boolean if a field has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) HasDocumentType() bool {
	if o != nil && !IsNil(o.DocumentType) {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the DocumentType field.
func (o *DocumentBreakdownDataComparisonBreakdown) SetDocumentType(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.DocumentType = &v
}

// GetDocumentNumbers returns the DocumentNumbers field value if set, zero value otherwise.
func (o *DocumentBreakdownDataComparisonBreakdown) GetDocumentNumbers() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.DocumentNumbers) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.DocumentNumbers
}

// GetDocumentNumbersOk returns a tuple with the DocumentNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) GetDocumentNumbersOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.DocumentNumbers) {
		return nil, false
	}
	return o.DocumentNumbers, true
}

// HasDocumentNumbers returns a boolean if a field has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) HasDocumentNumbers() bool {
	if o != nil && !IsNil(o.DocumentNumbers) {
		return true
	}

	return false
}

// SetDocumentNumbers gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the DocumentNumbers field.
func (o *DocumentBreakdownDataComparisonBreakdown) SetDocumentNumbers(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.DocumentNumbers = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *DocumentBreakdownDataComparisonBreakdown) GetFirstName() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.FirstName) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) GetFirstNameOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the FirstName field.
func (o *DocumentBreakdownDataComparisonBreakdown) SetFirstName(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.FirstName = &v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *DocumentBreakdownDataComparisonBreakdown) GetDateOfBirth() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) GetDateOfBirthOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *DocumentBreakdownDataComparisonBreakdown) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the DateOfBirth field.
func (o *DocumentBreakdownDataComparisonBreakdown) SetDateOfBirth(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.DateOfBirth = &v
}

func (o DocumentBreakdownDataComparisonBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentBreakdownDataComparisonBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IssuingCountry) {
		toSerialize["issuing_country"] = o.IssuingCountry
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.DateOfExpiry) {
		toSerialize["date_of_expiry"] = o.DateOfExpiry
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.DocumentType) {
		toSerialize["document_type"] = o.DocumentType
	}
	if !IsNil(o.DocumentNumbers) {
		toSerialize["document_numbers"] = o.DocumentNumbers
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.DateOfBirth) {
		toSerialize["date_of_birth"] = o.DateOfBirth
	}
	return toSerialize, nil
}

type NullableDocumentBreakdownDataComparisonBreakdown struct {
	value *DocumentBreakdownDataComparisonBreakdown
	isSet bool
}

func (v NullableDocumentBreakdownDataComparisonBreakdown) Get() *DocumentBreakdownDataComparisonBreakdown {
	return v.value
}

func (v *NullableDocumentBreakdownDataComparisonBreakdown) Set(val *DocumentBreakdownDataComparisonBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentBreakdownDataComparisonBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentBreakdownDataComparisonBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentBreakdownDataComparisonBreakdown(val *DocumentBreakdownDataComparisonBreakdown) *NullableDocumentBreakdownDataComparisonBreakdown {
	return &NullableDocumentBreakdownDataComparisonBreakdown{value: val, isSet: true}
}

func (v NullableDocumentBreakdownDataComparisonBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentBreakdownDataComparisonBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
