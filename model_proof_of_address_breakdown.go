/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the ProofOfAddressBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProofOfAddressBreakdown{}

// ProofOfAddressBreakdown struct for ProofOfAddressBreakdown
type ProofOfAddressBreakdown struct {
	DataComparison         *ProofOfAddressBreakdownDataComparison         `json:"data_comparison,omitempty"`
	DocumentClassification *ProofOfAddressBreakdownDocumentClassification `json:"document_classification,omitempty"`
	ImageIntegrity         *ProofOfAddressBreakdownImageIntegrity         `json:"image_integrity,omitempty"`
}

// NewProofOfAddressBreakdown instantiates a new ProofOfAddressBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProofOfAddressBreakdown() *ProofOfAddressBreakdown {
	this := ProofOfAddressBreakdown{}
	return &this
}

// NewProofOfAddressBreakdownWithDefaults instantiates a new ProofOfAddressBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProofOfAddressBreakdownWithDefaults() *ProofOfAddressBreakdown {
	this := ProofOfAddressBreakdown{}
	return &this
}

// GetDataComparison returns the DataComparison field value if set, zero value otherwise.
func (o *ProofOfAddressBreakdown) GetDataComparison() ProofOfAddressBreakdownDataComparison {
	if o == nil || IsNil(o.DataComparison) {
		var ret ProofOfAddressBreakdownDataComparison
		return ret
	}
	return *o.DataComparison
}

// GetDataComparisonOk returns a tuple with the DataComparison field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProofOfAddressBreakdown) GetDataComparisonOk() (*ProofOfAddressBreakdownDataComparison, bool) {
	if o == nil || IsNil(o.DataComparison) {
		return nil, false
	}
	return o.DataComparison, true
}

// HasDataComparison returns a boolean if a field has been set.
func (o *ProofOfAddressBreakdown) HasDataComparison() bool {
	if o != nil && !IsNil(o.DataComparison) {
		return true
	}

	return false
}

// SetDataComparison gets a reference to the given ProofOfAddressBreakdownDataComparison and assigns it to the DataComparison field.
func (o *ProofOfAddressBreakdown) SetDataComparison(v ProofOfAddressBreakdownDataComparison) {
	o.DataComparison = &v
}

// GetDocumentClassification returns the DocumentClassification field value if set, zero value otherwise.
func (o *ProofOfAddressBreakdown) GetDocumentClassification() ProofOfAddressBreakdownDocumentClassification {
	if o == nil || IsNil(o.DocumentClassification) {
		var ret ProofOfAddressBreakdownDocumentClassification
		return ret
	}
	return *o.DocumentClassification
}

// GetDocumentClassificationOk returns a tuple with the DocumentClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProofOfAddressBreakdown) GetDocumentClassificationOk() (*ProofOfAddressBreakdownDocumentClassification, bool) {
	if o == nil || IsNil(o.DocumentClassification) {
		return nil, false
	}
	return o.DocumentClassification, true
}

// HasDocumentClassification returns a boolean if a field has been set.
func (o *ProofOfAddressBreakdown) HasDocumentClassification() bool {
	if o != nil && !IsNil(o.DocumentClassification) {
		return true
	}

	return false
}

// SetDocumentClassification gets a reference to the given ProofOfAddressBreakdownDocumentClassification and assigns it to the DocumentClassification field.
func (o *ProofOfAddressBreakdown) SetDocumentClassification(v ProofOfAddressBreakdownDocumentClassification) {
	o.DocumentClassification = &v
}

// GetImageIntegrity returns the ImageIntegrity field value if set, zero value otherwise.
func (o *ProofOfAddressBreakdown) GetImageIntegrity() ProofOfAddressBreakdownImageIntegrity {
	if o == nil || IsNil(o.ImageIntegrity) {
		var ret ProofOfAddressBreakdownImageIntegrity
		return ret
	}
	return *o.ImageIntegrity
}

// GetImageIntegrityOk returns a tuple with the ImageIntegrity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProofOfAddressBreakdown) GetImageIntegrityOk() (*ProofOfAddressBreakdownImageIntegrity, bool) {
	if o == nil || IsNil(o.ImageIntegrity) {
		return nil, false
	}
	return o.ImageIntegrity, true
}

// HasImageIntegrity returns a boolean if a field has been set.
func (o *ProofOfAddressBreakdown) HasImageIntegrity() bool {
	if o != nil && !IsNil(o.ImageIntegrity) {
		return true
	}

	return false
}

// SetImageIntegrity gets a reference to the given ProofOfAddressBreakdownImageIntegrity and assigns it to the ImageIntegrity field.
func (o *ProofOfAddressBreakdown) SetImageIntegrity(v ProofOfAddressBreakdownImageIntegrity) {
	o.ImageIntegrity = &v
}

func (o ProofOfAddressBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProofOfAddressBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataComparison) {
		toSerialize["data_comparison"] = o.DataComparison
	}
	if !IsNil(o.DocumentClassification) {
		toSerialize["document_classification"] = o.DocumentClassification
	}
	if !IsNil(o.ImageIntegrity) {
		toSerialize["image_integrity"] = o.ImageIntegrity
	}
	return toSerialize, nil
}

type NullableProofOfAddressBreakdown struct {
	value *ProofOfAddressBreakdown
	isSet bool
}

func (v NullableProofOfAddressBreakdown) Get() *ProofOfAddressBreakdown {
	return v.value
}

func (v *NullableProofOfAddressBreakdown) Set(val *ProofOfAddressBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableProofOfAddressBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableProofOfAddressBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProofOfAddressBreakdown(val *ProofOfAddressBreakdown) *NullableProofOfAddressBreakdown {
	return &NullableProofOfAddressBreakdown{value: val, isSet: true}
}

func (v NullableProofOfAddressBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProofOfAddressBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
