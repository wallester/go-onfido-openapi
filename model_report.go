/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
	"fmt"
)

// Report - struct for Report
type Report struct {
	DocumentReport                              *DocumentReport
	DocumentWithAddressInformationReport        *DocumentWithAddressInformationReport
	DocumentWithDriverVerificationReport        *DocumentWithDriverVerificationReport
	DocumentWithDrivingLicenceInformationReport *DocumentWithDrivingLicenceInformationReport
	FacialSimilarityPhotoReport                 *FacialSimilarityPhotoReport
	FacialSimilarityVideoReport                 *FacialSimilarityVideoReport
	IdentityEnhancedReport                      *IdentityEnhancedReport
	KnownFacesReport                            *KnownFacesReport
	PhotoFullyAutoReport                        *PhotoFullyAutoReport
	ProofOfAddressReport                        *ProofOfAddressReport
	RightToWorkReport                           *RightToWorkReport
	WatchlistEnhancedReport                     *WatchlistEnhancedReport
	WatchlistPepsOnlyReport                     *WatchlistPepsOnlyReport
	WatchlistSanctionsOnlyReport                *WatchlistSanctionsOnlyReport
	WatchlistStandardReport                     *WatchlistStandardReport
}

// DocumentReportAsReport is a convenience function that returns DocumentReport wrapped in Report
func DocumentReportAsReport(v *DocumentReport) Report {
	return Report{
		DocumentReport: v,
	}
}

// DocumentWithAddressInformationReportAsReport is a convenience function that returns DocumentWithAddressInformationReport wrapped in Report
func DocumentWithAddressInformationReportAsReport(v *DocumentWithAddressInformationReport) Report {
	return Report{
		DocumentWithAddressInformationReport: v,
	}
}

// DocumentWithDriverVerificationReportAsReport is a convenience function that returns DocumentWithDriverVerificationReport wrapped in Report
func DocumentWithDriverVerificationReportAsReport(v *DocumentWithDriverVerificationReport) Report {
	return Report{
		DocumentWithDriverVerificationReport: v,
	}
}

// DocumentWithDrivingLicenceInformationReportAsReport is a convenience function that returns DocumentWithDrivingLicenceInformationReport wrapped in Report
func DocumentWithDrivingLicenceInformationReportAsReport(v *DocumentWithDrivingLicenceInformationReport) Report {
	return Report{
		DocumentWithDrivingLicenceInformationReport: v,
	}
}

// FacialSimilarityPhotoReportAsReport is a convenience function that returns FacialSimilarityPhotoReport wrapped in Report
func FacialSimilarityPhotoReportAsReport(v *FacialSimilarityPhotoReport) Report {
	return Report{
		FacialSimilarityPhotoReport: v,
	}
}

// FacialSimilarityVideoReportAsReport is a convenience function that returns FacialSimilarityVideoReport wrapped in Report
func FacialSimilarityVideoReportAsReport(v *FacialSimilarityVideoReport) Report {
	return Report{
		FacialSimilarityVideoReport: v,
	}
}

// IdentityEnhancedReportAsReport is a convenience function that returns IdentityEnhancedReport wrapped in Report
func IdentityEnhancedReportAsReport(v *IdentityEnhancedReport) Report {
	return Report{
		IdentityEnhancedReport: v,
	}
}

// KnownFacesReportAsReport is a convenience function that returns KnownFacesReport wrapped in Report
func KnownFacesReportAsReport(v *KnownFacesReport) Report {
	return Report{
		KnownFacesReport: v,
	}
}

// PhotoFullyAutoReportAsReport is a convenience function that returns PhotoFullyAutoReport wrapped in Report
func PhotoFullyAutoReportAsReport(v *PhotoFullyAutoReport) Report {
	return Report{
		PhotoFullyAutoReport: v,
	}
}

// ProofOfAddressReportAsReport is a convenience function that returns ProofOfAddressReport wrapped in Report
func ProofOfAddressReportAsReport(v *ProofOfAddressReport) Report {
	return Report{
		ProofOfAddressReport: v,
	}
}

// RightToWorkReportAsReport is a convenience function that returns RightToWorkReport wrapped in Report
func RightToWorkReportAsReport(v *RightToWorkReport) Report {
	return Report{
		RightToWorkReport: v,
	}
}

// WatchlistEnhancedReportAsReport is a convenience function that returns WatchlistEnhancedReport wrapped in Report
func WatchlistEnhancedReportAsReport(v *WatchlistEnhancedReport) Report {
	return Report{
		WatchlistEnhancedReport: v,
	}
}

// WatchlistPepsOnlyReportAsReport is a convenience function that returns WatchlistPepsOnlyReport wrapped in Report
func WatchlistPepsOnlyReportAsReport(v *WatchlistPepsOnlyReport) Report {
	return Report{
		WatchlistPepsOnlyReport: v,
	}
}

// WatchlistSanctionsOnlyReportAsReport is a convenience function that returns WatchlistSanctionsOnlyReport wrapped in Report
func WatchlistSanctionsOnlyReportAsReport(v *WatchlistSanctionsOnlyReport) Report {
	return Report{
		WatchlistSanctionsOnlyReport: v,
	}
}

// WatchlistStandardReportAsReport is a convenience function that returns WatchlistStandardReport wrapped in Report
func WatchlistStandardReportAsReport(v *WatchlistStandardReport) Report {
	return Report{
		WatchlistStandardReport: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Report) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DocumentReport
	err = newStrictDecoder(data).Decode(&dst.DocumentReport)
	if err == nil {
		jsonDocumentReport, _ := json.Marshal(dst.DocumentReport)
		if string(jsonDocumentReport) == "{}" { // empty struct
			dst.DocumentReport = nil
		} else {
			match++
		}
	} else {
		dst.DocumentReport = nil
	}

	// try to unmarshal data into DocumentWithAddressInformationReport
	err = newStrictDecoder(data).Decode(&dst.DocumentWithAddressInformationReport)
	if err == nil {
		jsonDocumentWithAddressInformationReport, _ := json.Marshal(dst.DocumentWithAddressInformationReport)
		if string(jsonDocumentWithAddressInformationReport) == "{}" { // empty struct
			dst.DocumentWithAddressInformationReport = nil
		} else {
			match++
		}
	} else {
		dst.DocumentWithAddressInformationReport = nil
	}

	// try to unmarshal data into DocumentWithDriverVerificationReport
	err = newStrictDecoder(data).Decode(&dst.DocumentWithDriverVerificationReport)
	if err == nil {
		jsonDocumentWithDriverVerificationReport, _ := json.Marshal(dst.DocumentWithDriverVerificationReport)
		if string(jsonDocumentWithDriverVerificationReport) == "{}" { // empty struct
			dst.DocumentWithDriverVerificationReport = nil
		} else {
			match++
		}
	} else {
		dst.DocumentWithDriverVerificationReport = nil
	}

	// try to unmarshal data into DocumentWithDrivingLicenceInformationReport
	err = newStrictDecoder(data).Decode(&dst.DocumentWithDrivingLicenceInformationReport)
	if err == nil {
		jsonDocumentWithDrivingLicenceInformationReport, _ := json.Marshal(dst.DocumentWithDrivingLicenceInformationReport)
		if string(jsonDocumentWithDrivingLicenceInformationReport) == "{}" { // empty struct
			dst.DocumentWithDrivingLicenceInformationReport = nil
		} else {
			match++
		}
	} else {
		dst.DocumentWithDrivingLicenceInformationReport = nil
	}

	// try to unmarshal data into FacialSimilarityPhotoReport
	err = newStrictDecoder(data).Decode(&dst.FacialSimilarityPhotoReport)
	if err == nil {
		jsonFacialSimilarityPhotoReport, _ := json.Marshal(dst.FacialSimilarityPhotoReport)
		if string(jsonFacialSimilarityPhotoReport) == "{}" { // empty struct
			dst.FacialSimilarityPhotoReport = nil
		} else {
			match++
		}
	} else {
		dst.FacialSimilarityPhotoReport = nil
	}

	// try to unmarshal data into FacialSimilarityVideoReport
	err = newStrictDecoder(data).Decode(&dst.FacialSimilarityVideoReport)
	if err == nil {
		jsonFacialSimilarityVideoReport, _ := json.Marshal(dst.FacialSimilarityVideoReport)
		if string(jsonFacialSimilarityVideoReport) == "{}" { // empty struct
			dst.FacialSimilarityVideoReport = nil
		} else {
			match++
		}
	} else {
		dst.FacialSimilarityVideoReport = nil
	}

	// try to unmarshal data into IdentityEnhancedReport
	err = newStrictDecoder(data).Decode(&dst.IdentityEnhancedReport)
	if err == nil {
		jsonIdentityEnhancedReport, _ := json.Marshal(dst.IdentityEnhancedReport)
		if string(jsonIdentityEnhancedReport) == "{}" { // empty struct
			dst.IdentityEnhancedReport = nil
		} else {
			match++
		}
	} else {
		dst.IdentityEnhancedReport = nil
	}

	// try to unmarshal data into KnownFacesReport
	err = newStrictDecoder(data).Decode(&dst.KnownFacesReport)
	if err == nil {
		jsonKnownFacesReport, _ := json.Marshal(dst.KnownFacesReport)
		if string(jsonKnownFacesReport) == "{}" { // empty struct
			dst.KnownFacesReport = nil
		} else {
			match++
		}
	} else {
		dst.KnownFacesReport = nil
	}

	// try to unmarshal data into PhotoFullyAutoReport
	err = newStrictDecoder(data).Decode(&dst.PhotoFullyAutoReport)
	if err == nil {
		jsonPhotoFullyAutoReport, _ := json.Marshal(dst.PhotoFullyAutoReport)
		if string(jsonPhotoFullyAutoReport) == "{}" { // empty struct
			dst.PhotoFullyAutoReport = nil
		} else {
			match++
		}
	} else {
		dst.PhotoFullyAutoReport = nil
	}

	// try to unmarshal data into ProofOfAddressReport
	err = newStrictDecoder(data).Decode(&dst.ProofOfAddressReport)
	if err == nil {
		jsonProofOfAddressReport, _ := json.Marshal(dst.ProofOfAddressReport)
		if string(jsonProofOfAddressReport) == "{}" { // empty struct
			dst.ProofOfAddressReport = nil
		} else {
			match++
		}
	} else {
		dst.ProofOfAddressReport = nil
	}

	// try to unmarshal data into RightToWorkReport
	err = newStrictDecoder(data).Decode(&dst.RightToWorkReport)
	if err == nil {
		jsonRightToWorkReport, _ := json.Marshal(dst.RightToWorkReport)
		if string(jsonRightToWorkReport) == "{}" { // empty struct
			dst.RightToWorkReport = nil
		} else {
			match++
		}
	} else {
		dst.RightToWorkReport = nil
	}

	// try to unmarshal data into WatchlistEnhancedReport
	err = newStrictDecoder(data).Decode(&dst.WatchlistEnhancedReport)
	if err == nil {
		jsonWatchlistEnhancedReport, _ := json.Marshal(dst.WatchlistEnhancedReport)
		if string(jsonWatchlistEnhancedReport) == "{}" { // empty struct
			dst.WatchlistEnhancedReport = nil
		} else {
			match++
		}
	} else {
		dst.WatchlistEnhancedReport = nil
	}

	// try to unmarshal data into WatchlistPepsOnlyReport
	err = newStrictDecoder(data).Decode(&dst.WatchlistPepsOnlyReport)
	if err == nil {
		jsonWatchlistPepsOnlyReport, _ := json.Marshal(dst.WatchlistPepsOnlyReport)
		if string(jsonWatchlistPepsOnlyReport) == "{}" { // empty struct
			dst.WatchlistPepsOnlyReport = nil
		} else {
			match++
		}
	} else {
		dst.WatchlistPepsOnlyReport = nil
	}

	// try to unmarshal data into WatchlistSanctionsOnlyReport
	err = newStrictDecoder(data).Decode(&dst.WatchlistSanctionsOnlyReport)
	if err == nil {
		jsonWatchlistSanctionsOnlyReport, _ := json.Marshal(dst.WatchlistSanctionsOnlyReport)
		if string(jsonWatchlistSanctionsOnlyReport) == "{}" { // empty struct
			dst.WatchlistSanctionsOnlyReport = nil
		} else {
			match++
		}
	} else {
		dst.WatchlistSanctionsOnlyReport = nil
	}

	// try to unmarshal data into WatchlistStandardReport
	err = newStrictDecoder(data).Decode(&dst.WatchlistStandardReport)
	if err == nil {
		jsonWatchlistStandardReport, _ := json.Marshal(dst.WatchlistStandardReport)
		if string(jsonWatchlistStandardReport) == "{}" { // empty struct
			dst.WatchlistStandardReport = nil
		} else {
			match++
		}
	} else {
		dst.WatchlistStandardReport = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DocumentReport = nil
		dst.DocumentWithAddressInformationReport = nil
		dst.DocumentWithDriverVerificationReport = nil
		dst.DocumentWithDrivingLicenceInformationReport = nil
		dst.FacialSimilarityPhotoReport = nil
		dst.FacialSimilarityVideoReport = nil
		dst.IdentityEnhancedReport = nil
		dst.KnownFacesReport = nil
		dst.PhotoFullyAutoReport = nil
		dst.ProofOfAddressReport = nil
		dst.RightToWorkReport = nil
		dst.WatchlistEnhancedReport = nil
		dst.WatchlistPepsOnlyReport = nil
		dst.WatchlistSanctionsOnlyReport = nil
		dst.WatchlistStandardReport = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Report)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Report)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Report) MarshalJSON() ([]byte, error) {
	if src.DocumentReport != nil {
		return json.Marshal(&src.DocumentReport)
	}

	if src.DocumentWithAddressInformationReport != nil {
		return json.Marshal(&src.DocumentWithAddressInformationReport)
	}

	if src.DocumentWithDriverVerificationReport != nil {
		return json.Marshal(&src.DocumentWithDriverVerificationReport)
	}

	if src.DocumentWithDrivingLicenceInformationReport != nil {
		return json.Marshal(&src.DocumentWithDrivingLicenceInformationReport)
	}

	if src.FacialSimilarityPhotoReport != nil {
		return json.Marshal(&src.FacialSimilarityPhotoReport)
	}

	if src.FacialSimilarityVideoReport != nil {
		return json.Marshal(&src.FacialSimilarityVideoReport)
	}

	if src.IdentityEnhancedReport != nil {
		return json.Marshal(&src.IdentityEnhancedReport)
	}

	if src.KnownFacesReport != nil {
		return json.Marshal(&src.KnownFacesReport)
	}

	if src.PhotoFullyAutoReport != nil {
		return json.Marshal(&src.PhotoFullyAutoReport)
	}

	if src.ProofOfAddressReport != nil {
		return json.Marshal(&src.ProofOfAddressReport)
	}

	if src.RightToWorkReport != nil {
		return json.Marshal(&src.RightToWorkReport)
	}

	if src.WatchlistEnhancedReport != nil {
		return json.Marshal(&src.WatchlistEnhancedReport)
	}

	if src.WatchlistPepsOnlyReport != nil {
		return json.Marshal(&src.WatchlistPepsOnlyReport)
	}

	if src.WatchlistSanctionsOnlyReport != nil {
		return json.Marshal(&src.WatchlistSanctionsOnlyReport)
	}

	if src.WatchlistStandardReport != nil {
		return json.Marshal(&src.WatchlistStandardReport)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Report) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DocumentReport != nil {
		return obj.DocumentReport
	}

	if obj.DocumentWithAddressInformationReport != nil {
		return obj.DocumentWithAddressInformationReport
	}

	if obj.DocumentWithDriverVerificationReport != nil {
		return obj.DocumentWithDriverVerificationReport
	}

	if obj.DocumentWithDrivingLicenceInformationReport != nil {
		return obj.DocumentWithDrivingLicenceInformationReport
	}

	if obj.FacialSimilarityPhotoReport != nil {
		return obj.FacialSimilarityPhotoReport
	}

	if obj.FacialSimilarityVideoReport != nil {
		return obj.FacialSimilarityVideoReport
	}

	if obj.IdentityEnhancedReport != nil {
		return obj.IdentityEnhancedReport
	}

	if obj.KnownFacesReport != nil {
		return obj.KnownFacesReport
	}

	if obj.PhotoFullyAutoReport != nil {
		return obj.PhotoFullyAutoReport
	}

	if obj.ProofOfAddressReport != nil {
		return obj.ProofOfAddressReport
	}

	if obj.RightToWorkReport != nil {
		return obj.RightToWorkReport
	}

	if obj.WatchlistEnhancedReport != nil {
		return obj.WatchlistEnhancedReport
	}

	if obj.WatchlistPepsOnlyReport != nil {
		return obj.WatchlistPepsOnlyReport
	}

	if obj.WatchlistSanctionsOnlyReport != nil {
		return obj.WatchlistSanctionsOnlyReport
	}

	if obj.WatchlistStandardReport != nil {
		return obj.WatchlistStandardReport
	}

	// all schemas are nil
	return nil
}

type NullableReport struct {
	value *Report
	isSet bool
}

func (v NullableReport) Get() *Report {
	return v.value
}

func (v *NullableReport) Set(val *Report) {
	v.value = val
	v.isSet = true
}

func (v NullableReport) IsSet() bool {
	return v.isSet
}

func (v *NullableReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReport(val *Report) *NullableReport {
	return &NullableReport{value: val, isSet: true}
}

func (v NullableReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
