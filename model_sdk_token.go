/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the SdkToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SdkToken{}

// SdkToken struct for SdkToken
type SdkToken struct {
	// The unique identifier of the applicant
	ApplicantId *string `json:"applicant_id,omitempty"`
	// The referrer URL pattern
	Referrer *string `json:"referrer,omitempty"`
	// The application ID (iOS or Android)
	ApplicationId *string `json:"application_id,omitempty"`
	// Enterprise Feature - The URL to be used for the cross device flow of the Web SDK
	CrossDeviceUrl *string `json:"cross_device_url,omitempty"`
	// The generated SDK token
	Token *string `json:"token,omitempty"`
}

// NewSdkToken instantiates a new SdkToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSdkToken() *SdkToken {
	this := SdkToken{}
	return &this
}

// NewSdkTokenWithDefaults instantiates a new SdkToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSdkTokenWithDefaults() *SdkToken {
	this := SdkToken{}
	return &this
}

// GetApplicantId returns the ApplicantId field value if set, zero value otherwise.
func (o *SdkToken) GetApplicantId() string {
	if o == nil || IsNil(o.ApplicantId) {
		var ret string
		return ret
	}
	return *o.ApplicantId
}

// GetApplicantIdOk returns a tuple with the ApplicantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdkToken) GetApplicantIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicantId) {
		return nil, false
	}
	return o.ApplicantId, true
}

// HasApplicantId returns a boolean if a field has been set.
func (o *SdkToken) HasApplicantId() bool {
	if o != nil && !IsNil(o.ApplicantId) {
		return true
	}

	return false
}

// SetApplicantId gets a reference to the given string and assigns it to the ApplicantId field.
func (o *SdkToken) SetApplicantId(v string) {
	o.ApplicantId = &v
}

// GetReferrer returns the Referrer field value if set, zero value otherwise.
func (o *SdkToken) GetReferrer() string {
	if o == nil || IsNil(o.Referrer) {
		var ret string
		return ret
	}
	return *o.Referrer
}

// GetReferrerOk returns a tuple with the Referrer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdkToken) GetReferrerOk() (*string, bool) {
	if o == nil || IsNil(o.Referrer) {
		return nil, false
	}
	return o.Referrer, true
}

// HasReferrer returns a boolean if a field has been set.
func (o *SdkToken) HasReferrer() bool {
	if o != nil && !IsNil(o.Referrer) {
		return true
	}

	return false
}

// SetReferrer gets a reference to the given string and assigns it to the Referrer field.
func (o *SdkToken) SetReferrer(v string) {
	o.Referrer = &v
}

// GetApplicationId returns the ApplicationId field value if set, zero value otherwise.
func (o *SdkToken) GetApplicationId() string {
	if o == nil || IsNil(o.ApplicationId) {
		var ret string
		return ret
	}
	return *o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdkToken) GetApplicationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationId) {
		return nil, false
	}
	return o.ApplicationId, true
}

// HasApplicationId returns a boolean if a field has been set.
func (o *SdkToken) HasApplicationId() bool {
	if o != nil && !IsNil(o.ApplicationId) {
		return true
	}

	return false
}

// SetApplicationId gets a reference to the given string and assigns it to the ApplicationId field.
func (o *SdkToken) SetApplicationId(v string) {
	o.ApplicationId = &v
}

// GetCrossDeviceUrl returns the CrossDeviceUrl field value if set, zero value otherwise.
func (o *SdkToken) GetCrossDeviceUrl() string {
	if o == nil || IsNil(o.CrossDeviceUrl) {
		var ret string
		return ret
	}
	return *o.CrossDeviceUrl
}

// GetCrossDeviceUrlOk returns a tuple with the CrossDeviceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdkToken) GetCrossDeviceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CrossDeviceUrl) {
		return nil, false
	}
	return o.CrossDeviceUrl, true
}

// HasCrossDeviceUrl returns a boolean if a field has been set.
func (o *SdkToken) HasCrossDeviceUrl() bool {
	if o != nil && !IsNil(o.CrossDeviceUrl) {
		return true
	}

	return false
}

// SetCrossDeviceUrl gets a reference to the given string and assigns it to the CrossDeviceUrl field.
func (o *SdkToken) SetCrossDeviceUrl(v string) {
	o.CrossDeviceUrl = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *SdkToken) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdkToken) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *SdkToken) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *SdkToken) SetToken(v string) {
	o.Token = &v
}

func (o SdkToken) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SdkToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicantId) {
		toSerialize["applicant_id"] = o.ApplicantId
	}
	if !IsNil(o.Referrer) {
		toSerialize["referrer"] = o.Referrer
	}
	if !IsNil(o.ApplicationId) {
		toSerialize["application_id"] = o.ApplicationId
	}
	if !IsNil(o.CrossDeviceUrl) {
		toSerialize["cross_device_url"] = o.CrossDeviceUrl
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableSdkToken struct {
	value *SdkToken
	isSet bool
}

func (v NullableSdkToken) Get() *SdkToken {
	return v.value
}

func (v *NullableSdkToken) Set(val *SdkToken) {
	v.value = val
	v.isSet = true
}

func (v NullableSdkToken) IsSet() bool {
	return v.isSet
}

func (v *NullableSdkToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSdkToken(val *SdkToken) *NullableSdkToken {
	return &NullableSdkToken{value: val, isSet: true}
}

func (v NullableSdkToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSdkToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
