/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the DocumentIQReasons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentIQReasons{}

// DocumentIQReasons struct for DocumentIQReasons
type DocumentIQReasons struct {
	// When an image of the document is too dark to be able to see data points.
	DarkPhoto *string `json:"dark_photo,omitempty"`
	// When there is light reflecting on the document causing glare to obstruct data points.
	GlareOnPhoto *string `json:"glare_on_photo,omitempty"`
	// When data points are blurred and no reference can be made elsewhere in the document or if the data points are too blurry and 'they could be something else'.
	BlurredPhoto *string `json:"blurred_photo,omitempty"`
	// When data points have been covered either by the applicant or by another object such as a sticker.
	CoveredPhoto *string `json:"covered_photo,omitempty"`
	// Any other reason not listed, such as when holograms are obscuring data points.
	OtherPhotoIssue *string `json:"other_photo_issue,omitempty"`
	// When a document is damaged and we are unable to make out data points.
	DamagedDocument *string `json:"damaged_document,omitempty"`
	// When the incorrect side of a document has been uploaded, and we have not received the front.
	IncorrectSide *string `json:"incorrect_side,omitempty"`
	// When data points are not included in the image due to the document being cut off.
	CutOffDocument *string `json:"cut_off_document,omitempty"`
	// If no document has been uploaded or there is a blank image.
	NoDocumentInImage *string `json:"no_document_in_image,omitempty"`
	// When 2 different documents are submitted in the same check.
	TwoDocumentsUploaded *string `json:"two_documents_uploaded,omitempty"`
}

// NewDocumentIQReasons instantiates a new DocumentIQReasons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentIQReasons() *DocumentIQReasons {
	this := DocumentIQReasons{}
	return &this
}

// NewDocumentIQReasonsWithDefaults instantiates a new DocumentIQReasons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentIQReasonsWithDefaults() *DocumentIQReasons {
	this := DocumentIQReasons{}
	return &this
}

// GetDarkPhoto returns the DarkPhoto field value if set, zero value otherwise.
func (o *DocumentIQReasons) GetDarkPhoto() string {
	if o == nil || IsNil(o.DarkPhoto) {
		var ret string
		return ret
	}
	return *o.DarkPhoto
}

// GetDarkPhotoOk returns a tuple with the DarkPhoto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentIQReasons) GetDarkPhotoOk() (*string, bool) {
	if o == nil || IsNil(o.DarkPhoto) {
		return nil, false
	}
	return o.DarkPhoto, true
}

// HasDarkPhoto returns a boolean if a field has been set.
func (o *DocumentIQReasons) HasDarkPhoto() bool {
	if o != nil && !IsNil(o.DarkPhoto) {
		return true
	}

	return false
}

// SetDarkPhoto gets a reference to the given string and assigns it to the DarkPhoto field.
func (o *DocumentIQReasons) SetDarkPhoto(v string) {
	o.DarkPhoto = &v
}

// GetGlareOnPhoto returns the GlareOnPhoto field value if set, zero value otherwise.
func (o *DocumentIQReasons) GetGlareOnPhoto() string {
	if o == nil || IsNil(o.GlareOnPhoto) {
		var ret string
		return ret
	}
	return *o.GlareOnPhoto
}

// GetGlareOnPhotoOk returns a tuple with the GlareOnPhoto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentIQReasons) GetGlareOnPhotoOk() (*string, bool) {
	if o == nil || IsNil(o.GlareOnPhoto) {
		return nil, false
	}
	return o.GlareOnPhoto, true
}

// HasGlareOnPhoto returns a boolean if a field has been set.
func (o *DocumentIQReasons) HasGlareOnPhoto() bool {
	if o != nil && !IsNil(o.GlareOnPhoto) {
		return true
	}

	return false
}

// SetGlareOnPhoto gets a reference to the given string and assigns it to the GlareOnPhoto field.
func (o *DocumentIQReasons) SetGlareOnPhoto(v string) {
	o.GlareOnPhoto = &v
}

// GetBlurredPhoto returns the BlurredPhoto field value if set, zero value otherwise.
func (o *DocumentIQReasons) GetBlurredPhoto() string {
	if o == nil || IsNil(o.BlurredPhoto) {
		var ret string
		return ret
	}
	return *o.BlurredPhoto
}

// GetBlurredPhotoOk returns a tuple with the BlurredPhoto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentIQReasons) GetBlurredPhotoOk() (*string, bool) {
	if o == nil || IsNil(o.BlurredPhoto) {
		return nil, false
	}
	return o.BlurredPhoto, true
}

// HasBlurredPhoto returns a boolean if a field has been set.
func (o *DocumentIQReasons) HasBlurredPhoto() bool {
	if o != nil && !IsNil(o.BlurredPhoto) {
		return true
	}

	return false
}

// SetBlurredPhoto gets a reference to the given string and assigns it to the BlurredPhoto field.
func (o *DocumentIQReasons) SetBlurredPhoto(v string) {
	o.BlurredPhoto = &v
}

// GetCoveredPhoto returns the CoveredPhoto field value if set, zero value otherwise.
func (o *DocumentIQReasons) GetCoveredPhoto() string {
	if o == nil || IsNil(o.CoveredPhoto) {
		var ret string
		return ret
	}
	return *o.CoveredPhoto
}

// GetCoveredPhotoOk returns a tuple with the CoveredPhoto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentIQReasons) GetCoveredPhotoOk() (*string, bool) {
	if o == nil || IsNil(o.CoveredPhoto) {
		return nil, false
	}
	return o.CoveredPhoto, true
}

// HasCoveredPhoto returns a boolean if a field has been set.
func (o *DocumentIQReasons) HasCoveredPhoto() bool {
	if o != nil && !IsNil(o.CoveredPhoto) {
		return true
	}

	return false
}

// SetCoveredPhoto gets a reference to the given string and assigns it to the CoveredPhoto field.
func (o *DocumentIQReasons) SetCoveredPhoto(v string) {
	o.CoveredPhoto = &v
}

// GetOtherPhotoIssue returns the OtherPhotoIssue field value if set, zero value otherwise.
func (o *DocumentIQReasons) GetOtherPhotoIssue() string {
	if o == nil || IsNil(o.OtherPhotoIssue) {
		var ret string
		return ret
	}
	return *o.OtherPhotoIssue
}

// GetOtherPhotoIssueOk returns a tuple with the OtherPhotoIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentIQReasons) GetOtherPhotoIssueOk() (*string, bool) {
	if o == nil || IsNil(o.OtherPhotoIssue) {
		return nil, false
	}
	return o.OtherPhotoIssue, true
}

// HasOtherPhotoIssue returns a boolean if a field has been set.
func (o *DocumentIQReasons) HasOtherPhotoIssue() bool {
	if o != nil && !IsNil(o.OtherPhotoIssue) {
		return true
	}

	return false
}

// SetOtherPhotoIssue gets a reference to the given string and assigns it to the OtherPhotoIssue field.
func (o *DocumentIQReasons) SetOtherPhotoIssue(v string) {
	o.OtherPhotoIssue = &v
}

// GetDamagedDocument returns the DamagedDocument field value if set, zero value otherwise.
func (o *DocumentIQReasons) GetDamagedDocument() string {
	if o == nil || IsNil(o.DamagedDocument) {
		var ret string
		return ret
	}
	return *o.DamagedDocument
}

// GetDamagedDocumentOk returns a tuple with the DamagedDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentIQReasons) GetDamagedDocumentOk() (*string, bool) {
	if o == nil || IsNil(o.DamagedDocument) {
		return nil, false
	}
	return o.DamagedDocument, true
}

// HasDamagedDocument returns a boolean if a field has been set.
func (o *DocumentIQReasons) HasDamagedDocument() bool {
	if o != nil && !IsNil(o.DamagedDocument) {
		return true
	}

	return false
}

// SetDamagedDocument gets a reference to the given string and assigns it to the DamagedDocument field.
func (o *DocumentIQReasons) SetDamagedDocument(v string) {
	o.DamagedDocument = &v
}

// GetIncorrectSide returns the IncorrectSide field value if set, zero value otherwise.
func (o *DocumentIQReasons) GetIncorrectSide() string {
	if o == nil || IsNil(o.IncorrectSide) {
		var ret string
		return ret
	}
	return *o.IncorrectSide
}

// GetIncorrectSideOk returns a tuple with the IncorrectSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentIQReasons) GetIncorrectSideOk() (*string, bool) {
	if o == nil || IsNil(o.IncorrectSide) {
		return nil, false
	}
	return o.IncorrectSide, true
}

// HasIncorrectSide returns a boolean if a field has been set.
func (o *DocumentIQReasons) HasIncorrectSide() bool {
	if o != nil && !IsNil(o.IncorrectSide) {
		return true
	}

	return false
}

// SetIncorrectSide gets a reference to the given string and assigns it to the IncorrectSide field.
func (o *DocumentIQReasons) SetIncorrectSide(v string) {
	o.IncorrectSide = &v
}

// GetCutOffDocument returns the CutOffDocument field value if set, zero value otherwise.
func (o *DocumentIQReasons) GetCutOffDocument() string {
	if o == nil || IsNil(o.CutOffDocument) {
		var ret string
		return ret
	}
	return *o.CutOffDocument
}

// GetCutOffDocumentOk returns a tuple with the CutOffDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentIQReasons) GetCutOffDocumentOk() (*string, bool) {
	if o == nil || IsNil(o.CutOffDocument) {
		return nil, false
	}
	return o.CutOffDocument, true
}

// HasCutOffDocument returns a boolean if a field has been set.
func (o *DocumentIQReasons) HasCutOffDocument() bool {
	if o != nil && !IsNil(o.CutOffDocument) {
		return true
	}

	return false
}

// SetCutOffDocument gets a reference to the given string and assigns it to the CutOffDocument field.
func (o *DocumentIQReasons) SetCutOffDocument(v string) {
	o.CutOffDocument = &v
}

// GetNoDocumentInImage returns the NoDocumentInImage field value if set, zero value otherwise.
func (o *DocumentIQReasons) GetNoDocumentInImage() string {
	if o == nil || IsNil(o.NoDocumentInImage) {
		var ret string
		return ret
	}
	return *o.NoDocumentInImage
}

// GetNoDocumentInImageOk returns a tuple with the NoDocumentInImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentIQReasons) GetNoDocumentInImageOk() (*string, bool) {
	if o == nil || IsNil(o.NoDocumentInImage) {
		return nil, false
	}
	return o.NoDocumentInImage, true
}

// HasNoDocumentInImage returns a boolean if a field has been set.
func (o *DocumentIQReasons) HasNoDocumentInImage() bool {
	if o != nil && !IsNil(o.NoDocumentInImage) {
		return true
	}

	return false
}

// SetNoDocumentInImage gets a reference to the given string and assigns it to the NoDocumentInImage field.
func (o *DocumentIQReasons) SetNoDocumentInImage(v string) {
	o.NoDocumentInImage = &v
}

// GetTwoDocumentsUploaded returns the TwoDocumentsUploaded field value if set, zero value otherwise.
func (o *DocumentIQReasons) GetTwoDocumentsUploaded() string {
	if o == nil || IsNil(o.TwoDocumentsUploaded) {
		var ret string
		return ret
	}
	return *o.TwoDocumentsUploaded
}

// GetTwoDocumentsUploadedOk returns a tuple with the TwoDocumentsUploaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentIQReasons) GetTwoDocumentsUploadedOk() (*string, bool) {
	if o == nil || IsNil(o.TwoDocumentsUploaded) {
		return nil, false
	}
	return o.TwoDocumentsUploaded, true
}

// HasTwoDocumentsUploaded returns a boolean if a field has been set.
func (o *DocumentIQReasons) HasTwoDocumentsUploaded() bool {
	if o != nil && !IsNil(o.TwoDocumentsUploaded) {
		return true
	}

	return false
}

// SetTwoDocumentsUploaded gets a reference to the given string and assigns it to the TwoDocumentsUploaded field.
func (o *DocumentIQReasons) SetTwoDocumentsUploaded(v string) {
	o.TwoDocumentsUploaded = &v
}

func (o DocumentIQReasons) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentIQReasons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DarkPhoto) {
		toSerialize["dark_photo"] = o.DarkPhoto
	}
	if !IsNil(o.GlareOnPhoto) {
		toSerialize["glare_on_photo"] = o.GlareOnPhoto
	}
	if !IsNil(o.BlurredPhoto) {
		toSerialize["blurred_photo"] = o.BlurredPhoto
	}
	if !IsNil(o.CoveredPhoto) {
		toSerialize["covered_photo"] = o.CoveredPhoto
	}
	if !IsNil(o.OtherPhotoIssue) {
		toSerialize["other_photo_issue"] = o.OtherPhotoIssue
	}
	if !IsNil(o.DamagedDocument) {
		toSerialize["damaged_document"] = o.DamagedDocument
	}
	if !IsNil(o.IncorrectSide) {
		toSerialize["incorrect_side"] = o.IncorrectSide
	}
	if !IsNil(o.CutOffDocument) {
		toSerialize["cut_off_document"] = o.CutOffDocument
	}
	if !IsNil(o.NoDocumentInImage) {
		toSerialize["no_document_in_image"] = o.NoDocumentInImage
	}
	if !IsNil(o.TwoDocumentsUploaded) {
		toSerialize["two_documents_uploaded"] = o.TwoDocumentsUploaded
	}
	return toSerialize, nil
}

type NullableDocumentIQReasons struct {
	value *DocumentIQReasons
	isSet bool
}

func (v NullableDocumentIQReasons) Get() *DocumentIQReasons {
	return v.value
}

func (v *NullableDocumentIQReasons) Set(val *DocumentIQReasons) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentIQReasons) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentIQReasons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentIQReasons(val *DocumentIQReasons) *NullableDocumentIQReasons {
	return &NullableDocumentIQReasons{value: val, isSet: true}
}

func (v NullableDocumentIQReasons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentIQReasons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
