/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the IdNumber type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdNumber{}

// IdNumber struct for IdNumber
type IdNumber struct {
	// Type of ID number. Valid values are `ssn`, `social_insurance`, `tax_id`, `identity_card`, `passport` and `driving_license`
	Type *string `json:"type,omitempty"`
	// Value of ID number
	Value *string `json:"value,omitempty"`
	// Two letter code of issuing state (state-issued driving licenses only)
	StateCode *string `json:"state_code,omitempty"`
}

// NewIdNumber instantiates a new IdNumber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdNumber() *IdNumber {
	this := IdNumber{}
	return &this
}

// NewIdNumberWithDefaults instantiates a new IdNumber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdNumberWithDefaults() *IdNumber {
	this := IdNumber{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IdNumber) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdNumber) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IdNumber) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IdNumber) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *IdNumber) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdNumber) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *IdNumber) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *IdNumber) SetValue(v string) {
	o.Value = &v
}

// GetStateCode returns the StateCode field value if set, zero value otherwise.
func (o *IdNumber) GetStateCode() string {
	if o == nil || IsNil(o.StateCode) {
		var ret string
		return ret
	}
	return *o.StateCode
}

// GetStateCodeOk returns a tuple with the StateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdNumber) GetStateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StateCode) {
		return nil, false
	}
	return o.StateCode, true
}

// HasStateCode returns a boolean if a field has been set.
func (o *IdNumber) HasStateCode() bool {
	if o != nil && !IsNil(o.StateCode) {
		return true
	}

	return false
}

// SetStateCode gets a reference to the given string and assigns it to the StateCode field.
func (o *IdNumber) SetStateCode(v string) {
	o.StateCode = &v
}

func (o IdNumber) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdNumber) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.StateCode) {
		toSerialize["state_code"] = o.StateCode
	}
	return toSerialize, nil
}

type NullableIdNumber struct {
	value *IdNumber
	isSet bool
}

func (v NullableIdNumber) Get() *IdNumber {
	return v.value
}

func (v *NullableIdNumber) Set(val *IdNumber) {
	v.value = val
	v.isSet = true
}

func (v NullableIdNumber) IsSet() bool {
	return v.isSet
}

func (v *NullableIdNumber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdNumber(val *IdNumber) *NullableIdNumber {
	return &NullableIdNumber{value: val, isSet: true}
}

func (v NullableIdNumber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdNumber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
