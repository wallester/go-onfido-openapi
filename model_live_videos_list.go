/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the LiveVideosList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LiveVideosList{}

// LiveVideosList struct for LiveVideosList
type LiveVideosList struct {
	LiveVideos []LiveVideo `json:"live_videos,omitempty"`
}

// NewLiveVideosList instantiates a new LiveVideosList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLiveVideosList() *LiveVideosList {
	this := LiveVideosList{}
	return &this
}

// NewLiveVideosListWithDefaults instantiates a new LiveVideosList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLiveVideosListWithDefaults() *LiveVideosList {
	this := LiveVideosList{}
	return &this
}

// GetLiveVideos returns the LiveVideos field value if set, zero value otherwise.
func (o *LiveVideosList) GetLiveVideos() []LiveVideo {
	if o == nil || IsNil(o.LiveVideos) {
		var ret []LiveVideo
		return ret
	}
	return o.LiveVideos
}

// GetLiveVideosOk returns a tuple with the LiveVideos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveVideosList) GetLiveVideosOk() ([]LiveVideo, bool) {
	if o == nil || IsNil(o.LiveVideos) {
		return nil, false
	}
	return o.LiveVideos, true
}

// HasLiveVideos returns a boolean if a field has been set.
func (o *LiveVideosList) HasLiveVideos() bool {
	if o != nil && !IsNil(o.LiveVideos) {
		return true
	}

	return false
}

// SetLiveVideos gets a reference to the given []LiveVideo and assigns it to the LiveVideos field.
func (o *LiveVideosList) SetLiveVideos(v []LiveVideo) {
	o.LiveVideos = v
}

func (o LiveVideosList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LiveVideosList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LiveVideos) {
		toSerialize["live_videos"] = o.LiveVideos
	}
	return toSerialize, nil
}

type NullableLiveVideosList struct {
	value *LiveVideosList
	isSet bool
}

func (v NullableLiveVideosList) Get() *LiveVideosList {
	return v.value
}

func (v *NullableLiveVideosList) Set(val *LiveVideosList) {
	v.value = val
	v.isSet = true
}

func (v NullableLiveVideosList) IsSet() bool {
	return v.isSet
}

func (v *NullableLiveVideosList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiveVideosList(val *LiveVideosList) *NullableLiveVideosList {
	return &NullableLiveVideosList{value: val, isSet: true}
}

func (v NullableLiveVideosList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiveVideosList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
