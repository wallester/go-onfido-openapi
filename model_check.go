/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
	"time"
)

// checks if the Check type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Check{}

// Check struct for Check
type Check struct {
	// The unique identifier for the check. Read-only.
	Id *string `json:"id,omitempty"`
	// The date and time when this check was created. Read-only.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The uri of this resource. Read-only.
	Href *string `json:"href,omitempty"`
	// The current state of the check in the checking process. Read-only.
	Status *string `json:"status,omitempty"`
	// The overall result of the check, based on the results of the constituent reports. Read-only.
	Result *string `json:"result,omitempty"`
	// A link to a PDF output of the check results. Append `.pdf` to get the pdf file. Read-only.
	DownloadUri *string `json:"download_uri,omitempty"`
	// A link to the applicant form, if `applicant_provides_data` is `true`. Read-only.
	FormUri *string `json:"form_uri,omitempty"`
	// For checks where `applicant_provides_data` is `true`, redirect to this URI when the applicant has submitted their data. Read-only.
	RedirectUri *string `json:"redirect_uri,omitempty"`
	// A link to the corresponding results page on the Onfido dashboard.
	ResultsUri *string `json:"results_uri,omitempty"`
	// An array of report names (strings).
	ReportNames []string `json:"report_names,omitempty"`
	// The ID of the applicant to do the check on.
	ApplicantId *string `json:"applicant_id,omitempty"`
	// Indicates whether the privacy notices and terms of service have been read and, where specific laws require, that consent has been given for Onfido.
	PrivacyNoticesReadConsentGiven *bool `json:"privacy_notices_read_consent_given,omitempty"`
	// Array of tags being assigned to this check.
	Tags []string `json:"tags,omitempty"`
	// Send an applicant form to applicant to complete to proceed with check. Defaults to false.
	ApplicantProvidesData *bool `json:"applicant_provides_data,omitempty"`
	// For checks where `applicant_provides_data` is `true`, applicant form will not be automatically sent if `suppress_form_emails` is set to `true`. You can manually send the form at any time after the check has been created, using the link found in the form_uri attribute of the check object. Write-only. Defaults to false.
	SuppressFormEmails *bool `json:"suppress_form_emails,omitempty"`
	// Defaults to `true`. Write-only. If set to `false`, you will only receive a response when all reports in your check have completed.
	Asynchronous *bool `json:"asynchronous,omitempty"`
	// Optional. An array of strings describing which webhooks to trigger for this check. By default, all webhooks registered in the account will be triggered and this value will be null in the responses.
	WebhookIds []string `json:"webhook_ids,omitempty"`
	// An array of report ids.
	ReportIds []string `json:"report_ids,omitempty"`
	// Optional. Array of strings describing which document to process in checks containing a Document report or a Facial Similarity report, or both. By default, the most recently uploaded document is used. `document_ids` is only usable with Document and Facial Similarity reports.
	DocumentIds []string `json:"document_ids,omitempty"`
	// Returns a pre-determined consider sub-result in sandbox for the specific reports in the consider array.
	Consider []string `json:"consider,omitempty"`
	// Triggers a pre-determined sub-result response for sandbox Document reports.
	SubResult *string `json:"sub_result,omitempty"`
}

// NewCheck instantiates a new Check object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheck() *Check {
	this := Check{}
	return &this
}

// NewCheckWithDefaults instantiates a new Check object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckWithDefaults() *Check {
	this := Check{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Check) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Check) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Check) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Check) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Check) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Check) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Check) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Check) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Check) SetHref(v string) {
	o.Href = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Check) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Check) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Check) SetStatus(v string) {
	o.Status = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *Check) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *Check) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *Check) SetResult(v string) {
	o.Result = &v
}

// GetDownloadUri returns the DownloadUri field value if set, zero value otherwise.
func (o *Check) GetDownloadUri() string {
	if o == nil || IsNil(o.DownloadUri) {
		var ret string
		return ret
	}
	return *o.DownloadUri
}

// GetDownloadUriOk returns a tuple with the DownloadUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetDownloadUriOk() (*string, bool) {
	if o == nil || IsNil(o.DownloadUri) {
		return nil, false
	}
	return o.DownloadUri, true
}

// HasDownloadUri returns a boolean if a field has been set.
func (o *Check) HasDownloadUri() bool {
	if o != nil && !IsNil(o.DownloadUri) {
		return true
	}

	return false
}

// SetDownloadUri gets a reference to the given string and assigns it to the DownloadUri field.
func (o *Check) SetDownloadUri(v string) {
	o.DownloadUri = &v
}

// GetFormUri returns the FormUri field value if set, zero value otherwise.
func (o *Check) GetFormUri() string {
	if o == nil || IsNil(o.FormUri) {
		var ret string
		return ret
	}
	return *o.FormUri
}

// GetFormUriOk returns a tuple with the FormUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetFormUriOk() (*string, bool) {
	if o == nil || IsNil(o.FormUri) {
		return nil, false
	}
	return o.FormUri, true
}

// HasFormUri returns a boolean if a field has been set.
func (o *Check) HasFormUri() bool {
	if o != nil && !IsNil(o.FormUri) {
		return true
	}

	return false
}

// SetFormUri gets a reference to the given string and assigns it to the FormUri field.
func (o *Check) SetFormUri(v string) {
	o.FormUri = &v
}

// GetRedirectUri returns the RedirectUri field value if set, zero value otherwise.
func (o *Check) GetRedirectUri() string {
	if o == nil || IsNil(o.RedirectUri) {
		var ret string
		return ret
	}
	return *o.RedirectUri
}

// GetRedirectUriOk returns a tuple with the RedirectUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetRedirectUriOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectUri) {
		return nil, false
	}
	return o.RedirectUri, true
}

// HasRedirectUri returns a boolean if a field has been set.
func (o *Check) HasRedirectUri() bool {
	if o != nil && !IsNil(o.RedirectUri) {
		return true
	}

	return false
}

// SetRedirectUri gets a reference to the given string and assigns it to the RedirectUri field.
func (o *Check) SetRedirectUri(v string) {
	o.RedirectUri = &v
}

// GetResultsUri returns the ResultsUri field value if set, zero value otherwise.
func (o *Check) GetResultsUri() string {
	if o == nil || IsNil(o.ResultsUri) {
		var ret string
		return ret
	}
	return *o.ResultsUri
}

// GetResultsUriOk returns a tuple with the ResultsUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetResultsUriOk() (*string, bool) {
	if o == nil || IsNil(o.ResultsUri) {
		return nil, false
	}
	return o.ResultsUri, true
}

// HasResultsUri returns a boolean if a field has been set.
func (o *Check) HasResultsUri() bool {
	if o != nil && !IsNil(o.ResultsUri) {
		return true
	}

	return false
}

// SetResultsUri gets a reference to the given string and assigns it to the ResultsUri field.
func (o *Check) SetResultsUri(v string) {
	o.ResultsUri = &v
}

// GetReportNames returns the ReportNames field value if set, zero value otherwise.
func (o *Check) GetReportNames() []string {
	if o == nil || IsNil(o.ReportNames) {
		var ret []string
		return ret
	}
	return o.ReportNames
}

// GetReportNamesOk returns a tuple with the ReportNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetReportNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ReportNames) {
		return nil, false
	}
	return o.ReportNames, true
}

// HasReportNames returns a boolean if a field has been set.
func (o *Check) HasReportNames() bool {
	if o != nil && !IsNil(o.ReportNames) {
		return true
	}

	return false
}

// SetReportNames gets a reference to the given []string and assigns it to the ReportNames field.
func (o *Check) SetReportNames(v []string) {
	o.ReportNames = v
}

// GetApplicantId returns the ApplicantId field value if set, zero value otherwise.
func (o *Check) GetApplicantId() string {
	if o == nil || IsNil(o.ApplicantId) {
		var ret string
		return ret
	}
	return *o.ApplicantId
}

// GetApplicantIdOk returns a tuple with the ApplicantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetApplicantIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicantId) {
		return nil, false
	}
	return o.ApplicantId, true
}

// HasApplicantId returns a boolean if a field has been set.
func (o *Check) HasApplicantId() bool {
	if o != nil && !IsNil(o.ApplicantId) {
		return true
	}

	return false
}

// SetApplicantId gets a reference to the given string and assigns it to the ApplicantId field.
func (o *Check) SetApplicantId(v string) {
	o.ApplicantId = &v
}

// GetPrivacyNoticesReadConsentGiven returns the PrivacyNoticesReadConsentGiven field value if set, zero value otherwise.
func (o *Check) GetPrivacyNoticesReadConsentGiven() bool {
	if o == nil || IsNil(o.PrivacyNoticesReadConsentGiven) {
		var ret bool
		return ret
	}
	return *o.PrivacyNoticesReadConsentGiven
}

// GetPrivacyNoticesReadConsentGivenOk returns a tuple with the PrivacyNoticesReadConsentGiven field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetPrivacyNoticesReadConsentGivenOk() (*bool, bool) {
	if o == nil || IsNil(o.PrivacyNoticesReadConsentGiven) {
		return nil, false
	}
	return o.PrivacyNoticesReadConsentGiven, true
}

// HasPrivacyNoticesReadConsentGiven returns a boolean if a field has been set.
func (o *Check) HasPrivacyNoticesReadConsentGiven() bool {
	if o != nil && !IsNil(o.PrivacyNoticesReadConsentGiven) {
		return true
	}

	return false
}

// SetPrivacyNoticesReadConsentGiven gets a reference to the given bool and assigns it to the PrivacyNoticesReadConsentGiven field.
func (o *Check) SetPrivacyNoticesReadConsentGiven(v bool) {
	o.PrivacyNoticesReadConsentGiven = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Check) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Check) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Check) SetTags(v []string) {
	o.Tags = v
}

// GetApplicantProvidesData returns the ApplicantProvidesData field value if set, zero value otherwise.
func (o *Check) GetApplicantProvidesData() bool {
	if o == nil || IsNil(o.ApplicantProvidesData) {
		var ret bool
		return ret
	}
	return *o.ApplicantProvidesData
}

// GetApplicantProvidesDataOk returns a tuple with the ApplicantProvidesData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetApplicantProvidesDataOk() (*bool, bool) {
	if o == nil || IsNil(o.ApplicantProvidesData) {
		return nil, false
	}
	return o.ApplicantProvidesData, true
}

// HasApplicantProvidesData returns a boolean if a field has been set.
func (o *Check) HasApplicantProvidesData() bool {
	if o != nil && !IsNil(o.ApplicantProvidesData) {
		return true
	}

	return false
}

// SetApplicantProvidesData gets a reference to the given bool and assigns it to the ApplicantProvidesData field.
func (o *Check) SetApplicantProvidesData(v bool) {
	o.ApplicantProvidesData = &v
}

// GetSuppressFormEmails returns the SuppressFormEmails field value if set, zero value otherwise.
func (o *Check) GetSuppressFormEmails() bool {
	if o == nil || IsNil(o.SuppressFormEmails) {
		var ret bool
		return ret
	}
	return *o.SuppressFormEmails
}

// GetSuppressFormEmailsOk returns a tuple with the SuppressFormEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetSuppressFormEmailsOk() (*bool, bool) {
	if o == nil || IsNil(o.SuppressFormEmails) {
		return nil, false
	}
	return o.SuppressFormEmails, true
}

// HasSuppressFormEmails returns a boolean if a field has been set.
func (o *Check) HasSuppressFormEmails() bool {
	if o != nil && !IsNil(o.SuppressFormEmails) {
		return true
	}

	return false
}

// SetSuppressFormEmails gets a reference to the given bool and assigns it to the SuppressFormEmails field.
func (o *Check) SetSuppressFormEmails(v bool) {
	o.SuppressFormEmails = &v
}

// GetAsynchronous returns the Asynchronous field value if set, zero value otherwise.
func (o *Check) GetAsynchronous() bool {
	if o == nil || IsNil(o.Asynchronous) {
		var ret bool
		return ret
	}
	return *o.Asynchronous
}

// GetAsynchronousOk returns a tuple with the Asynchronous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetAsynchronousOk() (*bool, bool) {
	if o == nil || IsNil(o.Asynchronous) {
		return nil, false
	}
	return o.Asynchronous, true
}

// HasAsynchronous returns a boolean if a field has been set.
func (o *Check) HasAsynchronous() bool {
	if o != nil && !IsNil(o.Asynchronous) {
		return true
	}

	return false
}

// SetAsynchronous gets a reference to the given bool and assigns it to the Asynchronous field.
func (o *Check) SetAsynchronous(v bool) {
	o.Asynchronous = &v
}

// GetWebhookIds returns the WebhookIds field value if set, zero value otherwise.
func (o *Check) GetWebhookIds() []string {
	if o == nil || IsNil(o.WebhookIds) {
		var ret []string
		return ret
	}
	return o.WebhookIds
}

// GetWebhookIdsOk returns a tuple with the WebhookIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetWebhookIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.WebhookIds) {
		return nil, false
	}
	return o.WebhookIds, true
}

// HasWebhookIds returns a boolean if a field has been set.
func (o *Check) HasWebhookIds() bool {
	if o != nil && !IsNil(o.WebhookIds) {
		return true
	}

	return false
}

// SetWebhookIds gets a reference to the given []string and assigns it to the WebhookIds field.
func (o *Check) SetWebhookIds(v []string) {
	o.WebhookIds = v
}

// GetReportIds returns the ReportIds field value if set, zero value otherwise.
func (o *Check) GetReportIds() []string {
	if o == nil || IsNil(o.ReportIds) {
		var ret []string
		return ret
	}
	return o.ReportIds
}

// GetReportIdsOk returns a tuple with the ReportIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetReportIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ReportIds) {
		return nil, false
	}
	return o.ReportIds, true
}

// HasReportIds returns a boolean if a field has been set.
func (o *Check) HasReportIds() bool {
	if o != nil && !IsNil(o.ReportIds) {
		return true
	}

	return false
}

// SetReportIds gets a reference to the given []string and assigns it to the ReportIds field.
func (o *Check) SetReportIds(v []string) {
	o.ReportIds = v
}

// GetDocumentIds returns the DocumentIds field value if set, zero value otherwise.
func (o *Check) GetDocumentIds() []string {
	if o == nil || IsNil(o.DocumentIds) {
		var ret []string
		return ret
	}
	return o.DocumentIds
}

// GetDocumentIdsOk returns a tuple with the DocumentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetDocumentIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DocumentIds) {
		return nil, false
	}
	return o.DocumentIds, true
}

// HasDocumentIds returns a boolean if a field has been set.
func (o *Check) HasDocumentIds() bool {
	if o != nil && !IsNil(o.DocumentIds) {
		return true
	}

	return false
}

// SetDocumentIds gets a reference to the given []string and assigns it to the DocumentIds field.
func (o *Check) SetDocumentIds(v []string) {
	o.DocumentIds = v
}

// GetConsider returns the Consider field value if set, zero value otherwise.
func (o *Check) GetConsider() []string {
	if o == nil || IsNil(o.Consider) {
		var ret []string
		return ret
	}
	return o.Consider
}

// GetConsiderOk returns a tuple with the Consider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetConsiderOk() ([]string, bool) {
	if o == nil || IsNil(o.Consider) {
		return nil, false
	}
	return o.Consider, true
}

// HasConsider returns a boolean if a field has been set.
func (o *Check) HasConsider() bool {
	if o != nil && !IsNil(o.Consider) {
		return true
	}

	return false
}

// SetConsider gets a reference to the given []string and assigns it to the Consider field.
func (o *Check) SetConsider(v []string) {
	o.Consider = v
}

// GetSubResult returns the SubResult field value if set, zero value otherwise.
func (o *Check) GetSubResult() string {
	if o == nil || IsNil(o.SubResult) {
		var ret string
		return ret
	}
	return *o.SubResult
}

// GetSubResultOk returns a tuple with the SubResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Check) GetSubResultOk() (*string, bool) {
	if o == nil || IsNil(o.SubResult) {
		return nil, false
	}
	return o.SubResult, true
}

// HasSubResult returns a boolean if a field has been set.
func (o *Check) HasSubResult() bool {
	if o != nil && !IsNil(o.SubResult) {
		return true
	}

	return false
}

// SetSubResult gets a reference to the given string and assigns it to the SubResult field.
func (o *Check) SetSubResult(v string) {
	o.SubResult = &v
}

func (o Check) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Check) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.DownloadUri) {
		toSerialize["download_uri"] = o.DownloadUri
	}
	if !IsNil(o.FormUri) {
		toSerialize["form_uri"] = o.FormUri
	}
	if !IsNil(o.RedirectUri) {
		toSerialize["redirect_uri"] = o.RedirectUri
	}
	if !IsNil(o.ResultsUri) {
		toSerialize["results_uri"] = o.ResultsUri
	}
	if !IsNil(o.ReportNames) {
		toSerialize["report_names"] = o.ReportNames
	}
	if !IsNil(o.ApplicantId) {
		toSerialize["applicant_id"] = o.ApplicantId
	}
	if !IsNil(o.PrivacyNoticesReadConsentGiven) {
		toSerialize["privacy_notices_read_consent_given"] = o.PrivacyNoticesReadConsentGiven
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.ApplicantProvidesData) {
		toSerialize["applicant_provides_data"] = o.ApplicantProvidesData
	}
	if !IsNil(o.SuppressFormEmails) {
		toSerialize["suppress_form_emails"] = o.SuppressFormEmails
	}
	if !IsNil(o.Asynchronous) {
		toSerialize["asynchronous"] = o.Asynchronous
	}
	if !IsNil(o.WebhookIds) {
		toSerialize["webhook_ids"] = o.WebhookIds
	}
	if !IsNil(o.ReportIds) {
		toSerialize["report_ids"] = o.ReportIds
	}
	if !IsNil(o.DocumentIds) {
		toSerialize["document_ids"] = o.DocumentIds
	}
	if !IsNil(o.Consider) {
		toSerialize["consider"] = o.Consider
	}
	if !IsNil(o.SubResult) {
		toSerialize["sub_result"] = o.SubResult
	}
	return toSerialize, nil
}

type NullableCheck struct {
	value *Check
	isSet bool
}

func (v NullableCheck) Get() *Check {
	return v.value
}

func (v *NullableCheck) Set(val *Check) {
	v.value = val
	v.isSet = true
}

func (v NullableCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheck(val *Check) *NullableCheck {
	return &NullableCheck{value: val, isSet: true}
}

func (v NullableCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
