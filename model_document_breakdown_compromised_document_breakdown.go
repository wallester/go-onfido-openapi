/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the DocumentBreakdownCompromisedDocumentBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentBreakdownCompromisedDocumentBreakdown{}

// DocumentBreakdownCompromisedDocumentBreakdown struct for DocumentBreakdownCompromisedDocumentBreakdown
type DocumentBreakdownCompromisedDocumentBreakdown struct {
	DocumentDatabase *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"document_database,omitempty"`
	RepeatAttempts   *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"repeat_attempts,omitempty"`
}

// NewDocumentBreakdownCompromisedDocumentBreakdown instantiates a new DocumentBreakdownCompromisedDocumentBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentBreakdownCompromisedDocumentBreakdown() *DocumentBreakdownCompromisedDocumentBreakdown {
	this := DocumentBreakdownCompromisedDocumentBreakdown{}
	return &this
}

// NewDocumentBreakdownCompromisedDocumentBreakdownWithDefaults instantiates a new DocumentBreakdownCompromisedDocumentBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentBreakdownCompromisedDocumentBreakdownWithDefaults() *DocumentBreakdownCompromisedDocumentBreakdown {
	this := DocumentBreakdownCompromisedDocumentBreakdown{}
	return &this
}

// GetDocumentDatabase returns the DocumentDatabase field value if set, zero value otherwise.
func (o *DocumentBreakdownCompromisedDocumentBreakdown) GetDocumentDatabase() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.DocumentDatabase) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.DocumentDatabase
}

// GetDocumentDatabaseOk returns a tuple with the DocumentDatabase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownCompromisedDocumentBreakdown) GetDocumentDatabaseOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.DocumentDatabase) {
		return nil, false
	}
	return o.DocumentDatabase, true
}

// HasDocumentDatabase returns a boolean if a field has been set.
func (o *DocumentBreakdownCompromisedDocumentBreakdown) HasDocumentDatabase() bool {
	if o != nil && !IsNil(o.DocumentDatabase) {
		return true
	}

	return false
}

// SetDocumentDatabase gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the DocumentDatabase field.
func (o *DocumentBreakdownCompromisedDocumentBreakdown) SetDocumentDatabase(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.DocumentDatabase = &v
}

// GetRepeatAttempts returns the RepeatAttempts field value if set, zero value otherwise.
func (o *DocumentBreakdownCompromisedDocumentBreakdown) GetRepeatAttempts() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.RepeatAttempts) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.RepeatAttempts
}

// GetRepeatAttemptsOk returns a tuple with the RepeatAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownCompromisedDocumentBreakdown) GetRepeatAttemptsOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.RepeatAttempts) {
		return nil, false
	}
	return o.RepeatAttempts, true
}

// HasRepeatAttempts returns a boolean if a field has been set.
func (o *DocumentBreakdownCompromisedDocumentBreakdown) HasRepeatAttempts() bool {
	if o != nil && !IsNil(o.RepeatAttempts) {
		return true
	}

	return false
}

// SetRepeatAttempts gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the RepeatAttempts field.
func (o *DocumentBreakdownCompromisedDocumentBreakdown) SetRepeatAttempts(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.RepeatAttempts = &v
}

func (o DocumentBreakdownCompromisedDocumentBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentBreakdownCompromisedDocumentBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DocumentDatabase) {
		toSerialize["document_database"] = o.DocumentDatabase
	}
	if !IsNil(o.RepeatAttempts) {
		toSerialize["repeat_attempts"] = o.RepeatAttempts
	}
	return toSerialize, nil
}

type NullableDocumentBreakdownCompromisedDocumentBreakdown struct {
	value *DocumentBreakdownCompromisedDocumentBreakdown
	isSet bool
}

func (v NullableDocumentBreakdownCompromisedDocumentBreakdown) Get() *DocumentBreakdownCompromisedDocumentBreakdown {
	return v.value
}

func (v *NullableDocumentBreakdownCompromisedDocumentBreakdown) Set(val *DocumentBreakdownCompromisedDocumentBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentBreakdownCompromisedDocumentBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentBreakdownCompromisedDocumentBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentBreakdownCompromisedDocumentBreakdown(val *DocumentBreakdownCompromisedDocumentBreakdown) *NullableDocumentBreakdownCompromisedDocumentBreakdown {
	return &NullableDocumentBreakdownCompromisedDocumentBreakdown{value: val, isSet: true}
}

func (v NullableDocumentBreakdownCompromisedDocumentBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentBreakdownCompromisedDocumentBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
