/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the DocumentBreakdownDataValidationBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentBreakdownDataValidationBreakdown{}

// DocumentBreakdownDataValidationBreakdown struct for DocumentBreakdownDataValidationBreakdown
type DocumentBreakdownDataValidationBreakdown struct {
	Gender             *DocumentBreakdownDataComparisonBreakdownIssuingCountry     `json:"gender,omitempty"`
	DateOfBirth        *DocumentBreakdownDataComparisonBreakdownIssuingCountry     `json:"date_of_birth,omitempty"`
	DocumentNumbers    *DocumentBreakdownDataComparisonBreakdownIssuingCountry     `json:"document_numbers,omitempty"`
	DocumentExpiration *DocumentBreakdownDataValidationBreakdownDocumentExpiration `json:"document_expiration,omitempty"`
	ExpiryDate         *DocumentBreakdownDataValidationBreakdownExpiryDate         `json:"expiry_date,omitempty"`
	Mrz                *DocumentBreakdownDataComparisonBreakdownIssuingCountry     `json:"mrz,omitempty"`
	Barcode            *DocumentBreakdownDataComparisonBreakdownIssuingCountry     `json:"barcode,omitempty"`
}

// NewDocumentBreakdownDataValidationBreakdown instantiates a new DocumentBreakdownDataValidationBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentBreakdownDataValidationBreakdown() *DocumentBreakdownDataValidationBreakdown {
	this := DocumentBreakdownDataValidationBreakdown{}
	return &this
}

// NewDocumentBreakdownDataValidationBreakdownWithDefaults instantiates a new DocumentBreakdownDataValidationBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentBreakdownDataValidationBreakdownWithDefaults() *DocumentBreakdownDataValidationBreakdown {
	this := DocumentBreakdownDataValidationBreakdown{}
	return &this
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *DocumentBreakdownDataValidationBreakdown) GetGender() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.Gender) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataValidationBreakdown) GetGenderOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *DocumentBreakdownDataValidationBreakdown) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the Gender field.
func (o *DocumentBreakdownDataValidationBreakdown) SetGender(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.Gender = &v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *DocumentBreakdownDataValidationBreakdown) GetDateOfBirth() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataValidationBreakdown) GetDateOfBirthOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *DocumentBreakdownDataValidationBreakdown) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the DateOfBirth field.
func (o *DocumentBreakdownDataValidationBreakdown) SetDateOfBirth(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.DateOfBirth = &v
}

// GetDocumentNumbers returns the DocumentNumbers field value if set, zero value otherwise.
func (o *DocumentBreakdownDataValidationBreakdown) GetDocumentNumbers() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.DocumentNumbers) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.DocumentNumbers
}

// GetDocumentNumbersOk returns a tuple with the DocumentNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataValidationBreakdown) GetDocumentNumbersOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.DocumentNumbers) {
		return nil, false
	}
	return o.DocumentNumbers, true
}

// HasDocumentNumbers returns a boolean if a field has been set.
func (o *DocumentBreakdownDataValidationBreakdown) HasDocumentNumbers() bool {
	if o != nil && !IsNil(o.DocumentNumbers) {
		return true
	}

	return false
}

// SetDocumentNumbers gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the DocumentNumbers field.
func (o *DocumentBreakdownDataValidationBreakdown) SetDocumentNumbers(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.DocumentNumbers = &v
}

// GetDocumentExpiration returns the DocumentExpiration field value if set, zero value otherwise.
func (o *DocumentBreakdownDataValidationBreakdown) GetDocumentExpiration() DocumentBreakdownDataValidationBreakdownDocumentExpiration {
	if o == nil || IsNil(o.DocumentExpiration) {
		var ret DocumentBreakdownDataValidationBreakdownDocumentExpiration
		return ret
	}
	return *o.DocumentExpiration
}

// GetDocumentExpirationOk returns a tuple with the DocumentExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataValidationBreakdown) GetDocumentExpirationOk() (*DocumentBreakdownDataValidationBreakdownDocumentExpiration, bool) {
	if o == nil || IsNil(o.DocumentExpiration) {
		return nil, false
	}
	return o.DocumentExpiration, true
}

// HasDocumentExpiration returns a boolean if a field has been set.
func (o *DocumentBreakdownDataValidationBreakdown) HasDocumentExpiration() bool {
	if o != nil && !IsNil(o.DocumentExpiration) {
		return true
	}

	return false
}

// SetDocumentExpiration gets a reference to the given DocumentBreakdownDataValidationBreakdownDocumentExpiration and assigns it to the DocumentExpiration field.
func (o *DocumentBreakdownDataValidationBreakdown) SetDocumentExpiration(v DocumentBreakdownDataValidationBreakdownDocumentExpiration) {
	o.DocumentExpiration = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *DocumentBreakdownDataValidationBreakdown) GetExpiryDate() DocumentBreakdownDataValidationBreakdownExpiryDate {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret DocumentBreakdownDataValidationBreakdownExpiryDate
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataValidationBreakdown) GetExpiryDateOk() (*DocumentBreakdownDataValidationBreakdownExpiryDate, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *DocumentBreakdownDataValidationBreakdown) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given DocumentBreakdownDataValidationBreakdownExpiryDate and assigns it to the ExpiryDate field.
func (o *DocumentBreakdownDataValidationBreakdown) SetExpiryDate(v DocumentBreakdownDataValidationBreakdownExpiryDate) {
	o.ExpiryDate = &v
}

// GetMrz returns the Mrz field value if set, zero value otherwise.
func (o *DocumentBreakdownDataValidationBreakdown) GetMrz() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.Mrz) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.Mrz
}

// GetMrzOk returns a tuple with the Mrz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataValidationBreakdown) GetMrzOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.Mrz) {
		return nil, false
	}
	return o.Mrz, true
}

// HasMrz returns a boolean if a field has been set.
func (o *DocumentBreakdownDataValidationBreakdown) HasMrz() bool {
	if o != nil && !IsNil(o.Mrz) {
		return true
	}

	return false
}

// SetMrz gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the Mrz field.
func (o *DocumentBreakdownDataValidationBreakdown) SetMrz(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.Mrz = &v
}

// GetBarcode returns the Barcode field value if set, zero value otherwise.
func (o *DocumentBreakdownDataValidationBreakdown) GetBarcode() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.Barcode) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.Barcode
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownDataValidationBreakdown) GetBarcodeOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.Barcode) {
		return nil, false
	}
	return o.Barcode, true
}

// HasBarcode returns a boolean if a field has been set.
func (o *DocumentBreakdownDataValidationBreakdown) HasBarcode() bool {
	if o != nil && !IsNil(o.Barcode) {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the Barcode field.
func (o *DocumentBreakdownDataValidationBreakdown) SetBarcode(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.Barcode = &v
}

func (o DocumentBreakdownDataValidationBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentBreakdownDataValidationBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.DateOfBirth) {
		toSerialize["date_of_birth"] = o.DateOfBirth
	}
	if !IsNil(o.DocumentNumbers) {
		toSerialize["document_numbers"] = o.DocumentNumbers
	}
	if !IsNil(o.DocumentExpiration) {
		toSerialize["document_expiration"] = o.DocumentExpiration
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiry_date"] = o.ExpiryDate
	}
	if !IsNil(o.Mrz) {
		toSerialize["mrz"] = o.Mrz
	}
	if !IsNil(o.Barcode) {
		toSerialize["barcode"] = o.Barcode
	}
	return toSerialize, nil
}

type NullableDocumentBreakdownDataValidationBreakdown struct {
	value *DocumentBreakdownDataValidationBreakdown
	isSet bool
}

func (v NullableDocumentBreakdownDataValidationBreakdown) Get() *DocumentBreakdownDataValidationBreakdown {
	return v.value
}

func (v *NullableDocumentBreakdownDataValidationBreakdown) Set(val *DocumentBreakdownDataValidationBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentBreakdownDataValidationBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentBreakdownDataValidationBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentBreakdownDataValidationBreakdown(val *DocumentBreakdownDataValidationBreakdown) *NullableDocumentBreakdownDataValidationBreakdown {
	return &NullableDocumentBreakdownDataValidationBreakdown{value: val, isSet: true}
}

func (v NullableDocumentBreakdownDataValidationBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentBreakdownDataValidationBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
