/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the RightToWorkBreakdownVisualAuthenticityBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RightToWorkBreakdownVisualAuthenticityBreakdown{}

// RightToWorkBreakdownVisualAuthenticityBreakdown struct for RightToWorkBreakdownVisualAuthenticityBreakdown
type RightToWorkBreakdownVisualAuthenticityBreakdown struct {
	Fonts                   *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"fonts,omitempty"`
	PictureFaceIntegrity    *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"picture_face_integrity,omitempty"`
	Template                *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"template,omitempty"`
	SecurityFeatures        *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"security_features,omitempty"`
	OriginalDocumentPresent *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"original_document_present,omitempty"`
	DigitalTampering        *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"digital_tampering,omitempty"`
	Other                   *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"other,omitempty"`
	FaceDetection           *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"face_detection,omitempty"`
}

// NewRightToWorkBreakdownVisualAuthenticityBreakdown instantiates a new RightToWorkBreakdownVisualAuthenticityBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRightToWorkBreakdownVisualAuthenticityBreakdown() *RightToWorkBreakdownVisualAuthenticityBreakdown {
	this := RightToWorkBreakdownVisualAuthenticityBreakdown{}
	return &this
}

// NewRightToWorkBreakdownVisualAuthenticityBreakdownWithDefaults instantiates a new RightToWorkBreakdownVisualAuthenticityBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRightToWorkBreakdownVisualAuthenticityBreakdownWithDefaults() *RightToWorkBreakdownVisualAuthenticityBreakdown {
	this := RightToWorkBreakdownVisualAuthenticityBreakdown{}
	return &this
}

// GetFonts returns the Fonts field value if set, zero value otherwise.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetFonts() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.Fonts) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.Fonts
}

// GetFontsOk returns a tuple with the Fonts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetFontsOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.Fonts) {
		return nil, false
	}
	return o.Fonts, true
}

// HasFonts returns a boolean if a field has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) HasFonts() bool {
	if o != nil && !IsNil(o.Fonts) {
		return true
	}

	return false
}

// SetFonts gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the Fonts field.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) SetFonts(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.Fonts = &v
}

// GetPictureFaceIntegrity returns the PictureFaceIntegrity field value if set, zero value otherwise.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetPictureFaceIntegrity() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.PictureFaceIntegrity) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.PictureFaceIntegrity
}

// GetPictureFaceIntegrityOk returns a tuple with the PictureFaceIntegrity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetPictureFaceIntegrityOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.PictureFaceIntegrity) {
		return nil, false
	}
	return o.PictureFaceIntegrity, true
}

// HasPictureFaceIntegrity returns a boolean if a field has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) HasPictureFaceIntegrity() bool {
	if o != nil && !IsNil(o.PictureFaceIntegrity) {
		return true
	}

	return false
}

// SetPictureFaceIntegrity gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the PictureFaceIntegrity field.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) SetPictureFaceIntegrity(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.PictureFaceIntegrity = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetTemplate() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.Template) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetTemplateOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the Template field.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) SetTemplate(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.Template = &v
}

// GetSecurityFeatures returns the SecurityFeatures field value if set, zero value otherwise.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetSecurityFeatures() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.SecurityFeatures) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.SecurityFeatures
}

// GetSecurityFeaturesOk returns a tuple with the SecurityFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetSecurityFeaturesOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.SecurityFeatures) {
		return nil, false
	}
	return o.SecurityFeatures, true
}

// HasSecurityFeatures returns a boolean if a field has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) HasSecurityFeatures() bool {
	if o != nil && !IsNil(o.SecurityFeatures) {
		return true
	}

	return false
}

// SetSecurityFeatures gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the SecurityFeatures field.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) SetSecurityFeatures(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.SecurityFeatures = &v
}

// GetOriginalDocumentPresent returns the OriginalDocumentPresent field value if set, zero value otherwise.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetOriginalDocumentPresent() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.OriginalDocumentPresent) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.OriginalDocumentPresent
}

// GetOriginalDocumentPresentOk returns a tuple with the OriginalDocumentPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetOriginalDocumentPresentOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.OriginalDocumentPresent) {
		return nil, false
	}
	return o.OriginalDocumentPresent, true
}

// HasOriginalDocumentPresent returns a boolean if a field has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) HasOriginalDocumentPresent() bool {
	if o != nil && !IsNil(o.OriginalDocumentPresent) {
		return true
	}

	return false
}

// SetOriginalDocumentPresent gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the OriginalDocumentPresent field.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) SetOriginalDocumentPresent(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.OriginalDocumentPresent = &v
}

// GetDigitalTampering returns the DigitalTampering field value if set, zero value otherwise.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetDigitalTampering() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.DigitalTampering) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.DigitalTampering
}

// GetDigitalTamperingOk returns a tuple with the DigitalTampering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetDigitalTamperingOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.DigitalTampering) {
		return nil, false
	}
	return o.DigitalTampering, true
}

// HasDigitalTampering returns a boolean if a field has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) HasDigitalTampering() bool {
	if o != nil && !IsNil(o.DigitalTampering) {
		return true
	}

	return false
}

// SetDigitalTampering gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the DigitalTampering field.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) SetDigitalTampering(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.DigitalTampering = &v
}

// GetOther returns the Other field value if set, zero value otherwise.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetOther() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.Other) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.Other
}

// GetOtherOk returns a tuple with the Other field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetOtherOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.Other) {
		return nil, false
	}
	return o.Other, true
}

// HasOther returns a boolean if a field has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) HasOther() bool {
	if o != nil && !IsNil(o.Other) {
		return true
	}

	return false
}

// SetOther gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the Other field.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) SetOther(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.Other = &v
}

// GetFaceDetection returns the FaceDetection field value if set, zero value otherwise.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetFaceDetection() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.FaceDetection) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.FaceDetection
}

// GetFaceDetectionOk returns a tuple with the FaceDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) GetFaceDetectionOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.FaceDetection) {
		return nil, false
	}
	return o.FaceDetection, true
}

// HasFaceDetection returns a boolean if a field has been set.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) HasFaceDetection() bool {
	if o != nil && !IsNil(o.FaceDetection) {
		return true
	}

	return false
}

// SetFaceDetection gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the FaceDetection field.
func (o *RightToWorkBreakdownVisualAuthenticityBreakdown) SetFaceDetection(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.FaceDetection = &v
}

func (o RightToWorkBreakdownVisualAuthenticityBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RightToWorkBreakdownVisualAuthenticityBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fonts) {
		toSerialize["fonts"] = o.Fonts
	}
	if !IsNil(o.PictureFaceIntegrity) {
		toSerialize["picture_face_integrity"] = o.PictureFaceIntegrity
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.SecurityFeatures) {
		toSerialize["security_features"] = o.SecurityFeatures
	}
	if !IsNil(o.OriginalDocumentPresent) {
		toSerialize["original_document_present"] = o.OriginalDocumentPresent
	}
	if !IsNil(o.DigitalTampering) {
		toSerialize["digital_tampering"] = o.DigitalTampering
	}
	if !IsNil(o.Other) {
		toSerialize["other"] = o.Other
	}
	if !IsNil(o.FaceDetection) {
		toSerialize["face_detection"] = o.FaceDetection
	}
	return toSerialize, nil
}

type NullableRightToWorkBreakdownVisualAuthenticityBreakdown struct {
	value *RightToWorkBreakdownVisualAuthenticityBreakdown
	isSet bool
}

func (v NullableRightToWorkBreakdownVisualAuthenticityBreakdown) Get() *RightToWorkBreakdownVisualAuthenticityBreakdown {
	return v.value
}

func (v *NullableRightToWorkBreakdownVisualAuthenticityBreakdown) Set(val *RightToWorkBreakdownVisualAuthenticityBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableRightToWorkBreakdownVisualAuthenticityBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableRightToWorkBreakdownVisualAuthenticityBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRightToWorkBreakdownVisualAuthenticityBreakdown(val *RightToWorkBreakdownVisualAuthenticityBreakdown) *NullableRightToWorkBreakdownVisualAuthenticityBreakdown {
	return &NullableRightToWorkBreakdownVisualAuthenticityBreakdown{value: val, isSet: true}
}

func (v NullableRightToWorkBreakdownVisualAuthenticityBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRightToWorkBreakdownVisualAuthenticityBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
