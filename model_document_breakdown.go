/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the DocumentBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentBreakdown{}

// DocumentBreakdown struct for DocumentBreakdown
type DocumentBreakdown struct {
	DataComparison      *DocumentBreakdownDataComparison      `json:"data_comparison,omitempty"`
	DataValidation      *DocumentBreakdownDataValidation      `json:"data_validation,omitempty"`
	ImageIntegrity      *DocumentBreakdownImageIntegrity      `json:"image_integrity,omitempty"`
	VisualAuthenticity  *DocumentBreakdownVisualAuthenticity  `json:"visual_authenticity,omitempty"`
	DataConsistency     *DocumentBreakdownDataConsistency     `json:"data_consistency,omitempty"`
	PoliceRecord        *DocumentBreakdownPoliceRecord        `json:"police_record,omitempty"`
	CompromisedDocument *DocumentBreakdownCompromisedDocument `json:"compromised_document,omitempty"`
	AgeValidation       *DocumentBreakdownAgeValidation       `json:"age_validation,omitempty"`
	IssuingAuthority    *DocumentBreakdownIssuingAuthority    `json:"issuing_authority,omitempty"`
}

// NewDocumentBreakdown instantiates a new DocumentBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentBreakdown() *DocumentBreakdown {
	this := DocumentBreakdown{}
	return &this
}

// NewDocumentBreakdownWithDefaults instantiates a new DocumentBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentBreakdownWithDefaults() *DocumentBreakdown {
	this := DocumentBreakdown{}
	return &this
}

// GetDataComparison returns the DataComparison field value if set, zero value otherwise.
func (o *DocumentBreakdown) GetDataComparison() DocumentBreakdownDataComparison {
	if o == nil || IsNil(o.DataComparison) {
		var ret DocumentBreakdownDataComparison
		return ret
	}
	return *o.DataComparison
}

// GetDataComparisonOk returns a tuple with the DataComparison field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdown) GetDataComparisonOk() (*DocumentBreakdownDataComparison, bool) {
	if o == nil || IsNil(o.DataComparison) {
		return nil, false
	}
	return o.DataComparison, true
}

// HasDataComparison returns a boolean if a field has been set.
func (o *DocumentBreakdown) HasDataComparison() bool {
	if o != nil && !IsNil(o.DataComparison) {
		return true
	}

	return false
}

// SetDataComparison gets a reference to the given DocumentBreakdownDataComparison and assigns it to the DataComparison field.
func (o *DocumentBreakdown) SetDataComparison(v DocumentBreakdownDataComparison) {
	o.DataComparison = &v
}

// GetDataValidation returns the DataValidation field value if set, zero value otherwise.
func (o *DocumentBreakdown) GetDataValidation() DocumentBreakdownDataValidation {
	if o == nil || IsNil(o.DataValidation) {
		var ret DocumentBreakdownDataValidation
		return ret
	}
	return *o.DataValidation
}

// GetDataValidationOk returns a tuple with the DataValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdown) GetDataValidationOk() (*DocumentBreakdownDataValidation, bool) {
	if o == nil || IsNil(o.DataValidation) {
		return nil, false
	}
	return o.DataValidation, true
}

// HasDataValidation returns a boolean if a field has been set.
func (o *DocumentBreakdown) HasDataValidation() bool {
	if o != nil && !IsNil(o.DataValidation) {
		return true
	}

	return false
}

// SetDataValidation gets a reference to the given DocumentBreakdownDataValidation and assigns it to the DataValidation field.
func (o *DocumentBreakdown) SetDataValidation(v DocumentBreakdownDataValidation) {
	o.DataValidation = &v
}

// GetImageIntegrity returns the ImageIntegrity field value if set, zero value otherwise.
func (o *DocumentBreakdown) GetImageIntegrity() DocumentBreakdownImageIntegrity {
	if o == nil || IsNil(o.ImageIntegrity) {
		var ret DocumentBreakdownImageIntegrity
		return ret
	}
	return *o.ImageIntegrity
}

// GetImageIntegrityOk returns a tuple with the ImageIntegrity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdown) GetImageIntegrityOk() (*DocumentBreakdownImageIntegrity, bool) {
	if o == nil || IsNil(o.ImageIntegrity) {
		return nil, false
	}
	return o.ImageIntegrity, true
}

// HasImageIntegrity returns a boolean if a field has been set.
func (o *DocumentBreakdown) HasImageIntegrity() bool {
	if o != nil && !IsNil(o.ImageIntegrity) {
		return true
	}

	return false
}

// SetImageIntegrity gets a reference to the given DocumentBreakdownImageIntegrity and assigns it to the ImageIntegrity field.
func (o *DocumentBreakdown) SetImageIntegrity(v DocumentBreakdownImageIntegrity) {
	o.ImageIntegrity = &v
}

// GetVisualAuthenticity returns the VisualAuthenticity field value if set, zero value otherwise.
func (o *DocumentBreakdown) GetVisualAuthenticity() DocumentBreakdownVisualAuthenticity {
	if o == nil || IsNil(o.VisualAuthenticity) {
		var ret DocumentBreakdownVisualAuthenticity
		return ret
	}
	return *o.VisualAuthenticity
}

// GetVisualAuthenticityOk returns a tuple with the VisualAuthenticity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdown) GetVisualAuthenticityOk() (*DocumentBreakdownVisualAuthenticity, bool) {
	if o == nil || IsNil(o.VisualAuthenticity) {
		return nil, false
	}
	return o.VisualAuthenticity, true
}

// HasVisualAuthenticity returns a boolean if a field has been set.
func (o *DocumentBreakdown) HasVisualAuthenticity() bool {
	if o != nil && !IsNil(o.VisualAuthenticity) {
		return true
	}

	return false
}

// SetVisualAuthenticity gets a reference to the given DocumentBreakdownVisualAuthenticity and assigns it to the VisualAuthenticity field.
func (o *DocumentBreakdown) SetVisualAuthenticity(v DocumentBreakdownVisualAuthenticity) {
	o.VisualAuthenticity = &v
}

// GetDataConsistency returns the DataConsistency field value if set, zero value otherwise.
func (o *DocumentBreakdown) GetDataConsistency() DocumentBreakdownDataConsistency {
	if o == nil || IsNil(o.DataConsistency) {
		var ret DocumentBreakdownDataConsistency
		return ret
	}
	return *o.DataConsistency
}

// GetDataConsistencyOk returns a tuple with the DataConsistency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdown) GetDataConsistencyOk() (*DocumentBreakdownDataConsistency, bool) {
	if o == nil || IsNil(o.DataConsistency) {
		return nil, false
	}
	return o.DataConsistency, true
}

// HasDataConsistency returns a boolean if a field has been set.
func (o *DocumentBreakdown) HasDataConsistency() bool {
	if o != nil && !IsNil(o.DataConsistency) {
		return true
	}

	return false
}

// SetDataConsistency gets a reference to the given DocumentBreakdownDataConsistency and assigns it to the DataConsistency field.
func (o *DocumentBreakdown) SetDataConsistency(v DocumentBreakdownDataConsistency) {
	o.DataConsistency = &v
}

// GetPoliceRecord returns the PoliceRecord field value if set, zero value otherwise.
func (o *DocumentBreakdown) GetPoliceRecord() DocumentBreakdownPoliceRecord {
	if o == nil || IsNil(o.PoliceRecord) {
		var ret DocumentBreakdownPoliceRecord
		return ret
	}
	return *o.PoliceRecord
}

// GetPoliceRecordOk returns a tuple with the PoliceRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdown) GetPoliceRecordOk() (*DocumentBreakdownPoliceRecord, bool) {
	if o == nil || IsNil(o.PoliceRecord) {
		return nil, false
	}
	return o.PoliceRecord, true
}

// HasPoliceRecord returns a boolean if a field has been set.
func (o *DocumentBreakdown) HasPoliceRecord() bool {
	if o != nil && !IsNil(o.PoliceRecord) {
		return true
	}

	return false
}

// SetPoliceRecord gets a reference to the given DocumentBreakdownPoliceRecord and assigns it to the PoliceRecord field.
func (o *DocumentBreakdown) SetPoliceRecord(v DocumentBreakdownPoliceRecord) {
	o.PoliceRecord = &v
}

// GetCompromisedDocument returns the CompromisedDocument field value if set, zero value otherwise.
func (o *DocumentBreakdown) GetCompromisedDocument() DocumentBreakdownCompromisedDocument {
	if o == nil || IsNil(o.CompromisedDocument) {
		var ret DocumentBreakdownCompromisedDocument
		return ret
	}
	return *o.CompromisedDocument
}

// GetCompromisedDocumentOk returns a tuple with the CompromisedDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdown) GetCompromisedDocumentOk() (*DocumentBreakdownCompromisedDocument, bool) {
	if o == nil || IsNil(o.CompromisedDocument) {
		return nil, false
	}
	return o.CompromisedDocument, true
}

// HasCompromisedDocument returns a boolean if a field has been set.
func (o *DocumentBreakdown) HasCompromisedDocument() bool {
	if o != nil && !IsNil(o.CompromisedDocument) {
		return true
	}

	return false
}

// SetCompromisedDocument gets a reference to the given DocumentBreakdownCompromisedDocument and assigns it to the CompromisedDocument field.
func (o *DocumentBreakdown) SetCompromisedDocument(v DocumentBreakdownCompromisedDocument) {
	o.CompromisedDocument = &v
}

// GetAgeValidation returns the AgeValidation field value if set, zero value otherwise.
func (o *DocumentBreakdown) GetAgeValidation() DocumentBreakdownAgeValidation {
	if o == nil || IsNil(o.AgeValidation) {
		var ret DocumentBreakdownAgeValidation
		return ret
	}
	return *o.AgeValidation
}

// GetAgeValidationOk returns a tuple with the AgeValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdown) GetAgeValidationOk() (*DocumentBreakdownAgeValidation, bool) {
	if o == nil || IsNil(o.AgeValidation) {
		return nil, false
	}
	return o.AgeValidation, true
}

// HasAgeValidation returns a boolean if a field has been set.
func (o *DocumentBreakdown) HasAgeValidation() bool {
	if o != nil && !IsNil(o.AgeValidation) {
		return true
	}

	return false
}

// SetAgeValidation gets a reference to the given DocumentBreakdownAgeValidation and assigns it to the AgeValidation field.
func (o *DocumentBreakdown) SetAgeValidation(v DocumentBreakdownAgeValidation) {
	o.AgeValidation = &v
}

// GetIssuingAuthority returns the IssuingAuthority field value if set, zero value otherwise.
func (o *DocumentBreakdown) GetIssuingAuthority() DocumentBreakdownIssuingAuthority {
	if o == nil || IsNil(o.IssuingAuthority) {
		var ret DocumentBreakdownIssuingAuthority
		return ret
	}
	return *o.IssuingAuthority
}

// GetIssuingAuthorityOk returns a tuple with the IssuingAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdown) GetIssuingAuthorityOk() (*DocumentBreakdownIssuingAuthority, bool) {
	if o == nil || IsNil(o.IssuingAuthority) {
		return nil, false
	}
	return o.IssuingAuthority, true
}

// HasIssuingAuthority returns a boolean if a field has been set.
func (o *DocumentBreakdown) HasIssuingAuthority() bool {
	if o != nil && !IsNil(o.IssuingAuthority) {
		return true
	}

	return false
}

// SetIssuingAuthority gets a reference to the given DocumentBreakdownIssuingAuthority and assigns it to the IssuingAuthority field.
func (o *DocumentBreakdown) SetIssuingAuthority(v DocumentBreakdownIssuingAuthority) {
	o.IssuingAuthority = &v
}

func (o DocumentBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataComparison) {
		toSerialize["data_comparison"] = o.DataComparison
	}
	if !IsNil(o.DataValidation) {
		toSerialize["data_validation"] = o.DataValidation
	}
	if !IsNil(o.ImageIntegrity) {
		toSerialize["image_integrity"] = o.ImageIntegrity
	}
	if !IsNil(o.VisualAuthenticity) {
		toSerialize["visual_authenticity"] = o.VisualAuthenticity
	}
	if !IsNil(o.DataConsistency) {
		toSerialize["data_consistency"] = o.DataConsistency
	}
	if !IsNil(o.PoliceRecord) {
		toSerialize["police_record"] = o.PoliceRecord
	}
	if !IsNil(o.CompromisedDocument) {
		toSerialize["compromised_document"] = o.CompromisedDocument
	}
	if !IsNil(o.AgeValidation) {
		toSerialize["age_validation"] = o.AgeValidation
	}
	if !IsNil(o.IssuingAuthority) {
		toSerialize["issuing_authority"] = o.IssuingAuthority
	}
	return toSerialize, nil
}

type NullableDocumentBreakdown struct {
	value *DocumentBreakdown
	isSet bool
}

func (v NullableDocumentBreakdown) Get() *DocumentBreakdown {
	return v.value
}

func (v *NullableDocumentBreakdown) Set(val *DocumentBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentBreakdown(val *DocumentBreakdown) *NullableDocumentBreakdown {
	return &NullableDocumentBreakdown{value: val, isSet: true}
}

func (v NullableDocumentBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
