/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the CompleteTaskRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteTaskRequest{}

// CompleteTaskRequest struct for CompleteTaskRequest
type CompleteTaskRequest struct {
	// The Task completion payload.
	Data map[string]interface{} `json:"data,omitempty"`
}

// NewCompleteTaskRequest instantiates a new CompleteTaskRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteTaskRequest() *CompleteTaskRequest {
	this := CompleteTaskRequest{}
	return &this
}

// NewCompleteTaskRequestWithDefaults instantiates a new CompleteTaskRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteTaskRequestWithDefaults() *CompleteTaskRequest {
	this := CompleteTaskRequest{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CompleteTaskRequest) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteTaskRequest) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CompleteTaskRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *CompleteTaskRequest) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o CompleteTaskRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteTaskRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableCompleteTaskRequest struct {
	value *CompleteTaskRequest
	isSet bool
}

func (v NullableCompleteTaskRequest) Get() *CompleteTaskRequest {
	return v.value
}

func (v *NullableCompleteTaskRequest) Set(val *CompleteTaskRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteTaskRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteTaskRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteTaskRequest(val *CompleteTaskRequest) *NullableCompleteTaskRequest {
	return &NullableCompleteTaskRequest{value: val, isSet: true}
}

func (v NullableCompleteTaskRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteTaskRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
