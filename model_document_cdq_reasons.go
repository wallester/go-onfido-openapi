/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the DocumentCDQReasons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentCDQReasons{}

// DocumentCDQReasons struct for DocumentCDQReasons
type DocumentCDQReasons struct {
	// When data points are obscured to the point that we cannot confirm if the fonts match the expected ones.
	ObscuredDataPoints *string `json:"obscured_data_points,omitempty"`
	// When a critical security feature is obscured. This can also refer to when the holder's wet signature, necessary for the document to be valid, is not present.
	ObscuredSecurityFeatures *string `json:"obscured_security_features,omitempty"`
	// One of 3 reasons (1) OCR Assisted Scans (i.e. when you're able to move the mouse and highlight part of text), (2) Severely Washed out Background, (3) Overlapping Text.
	AbnormalDocumentFeatures *string `json:"abnormal_document_features,omitempty"`
	// Any digital text or electronic watermarks on the document.
	WatermarksDigitalTextOverlay *string `json:"watermarks_digital_text_overlay,omitempty"`
	// If the corner has been physically cut off. This can be found on some documents that are no longer valid.
	CornerRemoved *string `json:"corner_removed,omitempty"`
	// A punched hole is present.
	PuncturedDocument *string `json:"punctured_document,omitempty"`
	// When the back of a document is needed for processing, but is not available.
	MissingBack *string `json:"missing_back,omitempty"`
	// When a document has been published digitally, there arenâ€™t enough security features to review so we cannot perform a full fraud assessment.
	DigitalDocument *string `json:"digital_document,omitempty"`
}

// NewDocumentCDQReasons instantiates a new DocumentCDQReasons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentCDQReasons() *DocumentCDQReasons {
	this := DocumentCDQReasons{}
	return &this
}

// NewDocumentCDQReasonsWithDefaults instantiates a new DocumentCDQReasons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentCDQReasonsWithDefaults() *DocumentCDQReasons {
	this := DocumentCDQReasons{}
	return &this
}

// GetObscuredDataPoints returns the ObscuredDataPoints field value if set, zero value otherwise.
func (o *DocumentCDQReasons) GetObscuredDataPoints() string {
	if o == nil || IsNil(o.ObscuredDataPoints) {
		var ret string
		return ret
	}
	return *o.ObscuredDataPoints
}

// GetObscuredDataPointsOk returns a tuple with the ObscuredDataPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentCDQReasons) GetObscuredDataPointsOk() (*string, bool) {
	if o == nil || IsNil(o.ObscuredDataPoints) {
		return nil, false
	}
	return o.ObscuredDataPoints, true
}

// HasObscuredDataPoints returns a boolean if a field has been set.
func (o *DocumentCDQReasons) HasObscuredDataPoints() bool {
	if o != nil && !IsNil(o.ObscuredDataPoints) {
		return true
	}

	return false
}

// SetObscuredDataPoints gets a reference to the given string and assigns it to the ObscuredDataPoints field.
func (o *DocumentCDQReasons) SetObscuredDataPoints(v string) {
	o.ObscuredDataPoints = &v
}

// GetObscuredSecurityFeatures returns the ObscuredSecurityFeatures field value if set, zero value otherwise.
func (o *DocumentCDQReasons) GetObscuredSecurityFeatures() string {
	if o == nil || IsNil(o.ObscuredSecurityFeatures) {
		var ret string
		return ret
	}
	return *o.ObscuredSecurityFeatures
}

// GetObscuredSecurityFeaturesOk returns a tuple with the ObscuredSecurityFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentCDQReasons) GetObscuredSecurityFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.ObscuredSecurityFeatures) {
		return nil, false
	}
	return o.ObscuredSecurityFeatures, true
}

// HasObscuredSecurityFeatures returns a boolean if a field has been set.
func (o *DocumentCDQReasons) HasObscuredSecurityFeatures() bool {
	if o != nil && !IsNil(o.ObscuredSecurityFeatures) {
		return true
	}

	return false
}

// SetObscuredSecurityFeatures gets a reference to the given string and assigns it to the ObscuredSecurityFeatures field.
func (o *DocumentCDQReasons) SetObscuredSecurityFeatures(v string) {
	o.ObscuredSecurityFeatures = &v
}

// GetAbnormalDocumentFeatures returns the AbnormalDocumentFeatures field value if set, zero value otherwise.
func (o *DocumentCDQReasons) GetAbnormalDocumentFeatures() string {
	if o == nil || IsNil(o.AbnormalDocumentFeatures) {
		var ret string
		return ret
	}
	return *o.AbnormalDocumentFeatures
}

// GetAbnormalDocumentFeaturesOk returns a tuple with the AbnormalDocumentFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentCDQReasons) GetAbnormalDocumentFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.AbnormalDocumentFeatures) {
		return nil, false
	}
	return o.AbnormalDocumentFeatures, true
}

// HasAbnormalDocumentFeatures returns a boolean if a field has been set.
func (o *DocumentCDQReasons) HasAbnormalDocumentFeatures() bool {
	if o != nil && !IsNil(o.AbnormalDocumentFeatures) {
		return true
	}

	return false
}

// SetAbnormalDocumentFeatures gets a reference to the given string and assigns it to the AbnormalDocumentFeatures field.
func (o *DocumentCDQReasons) SetAbnormalDocumentFeatures(v string) {
	o.AbnormalDocumentFeatures = &v
}

// GetWatermarksDigitalTextOverlay returns the WatermarksDigitalTextOverlay field value if set, zero value otherwise.
func (o *DocumentCDQReasons) GetWatermarksDigitalTextOverlay() string {
	if o == nil || IsNil(o.WatermarksDigitalTextOverlay) {
		var ret string
		return ret
	}
	return *o.WatermarksDigitalTextOverlay
}

// GetWatermarksDigitalTextOverlayOk returns a tuple with the WatermarksDigitalTextOverlay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentCDQReasons) GetWatermarksDigitalTextOverlayOk() (*string, bool) {
	if o == nil || IsNil(o.WatermarksDigitalTextOverlay) {
		return nil, false
	}
	return o.WatermarksDigitalTextOverlay, true
}

// HasWatermarksDigitalTextOverlay returns a boolean if a field has been set.
func (o *DocumentCDQReasons) HasWatermarksDigitalTextOverlay() bool {
	if o != nil && !IsNil(o.WatermarksDigitalTextOverlay) {
		return true
	}

	return false
}

// SetWatermarksDigitalTextOverlay gets a reference to the given string and assigns it to the WatermarksDigitalTextOverlay field.
func (o *DocumentCDQReasons) SetWatermarksDigitalTextOverlay(v string) {
	o.WatermarksDigitalTextOverlay = &v
}

// GetCornerRemoved returns the CornerRemoved field value if set, zero value otherwise.
func (o *DocumentCDQReasons) GetCornerRemoved() string {
	if o == nil || IsNil(o.CornerRemoved) {
		var ret string
		return ret
	}
	return *o.CornerRemoved
}

// GetCornerRemovedOk returns a tuple with the CornerRemoved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentCDQReasons) GetCornerRemovedOk() (*string, bool) {
	if o == nil || IsNil(o.CornerRemoved) {
		return nil, false
	}
	return o.CornerRemoved, true
}

// HasCornerRemoved returns a boolean if a field has been set.
func (o *DocumentCDQReasons) HasCornerRemoved() bool {
	if o != nil && !IsNil(o.CornerRemoved) {
		return true
	}

	return false
}

// SetCornerRemoved gets a reference to the given string and assigns it to the CornerRemoved field.
func (o *DocumentCDQReasons) SetCornerRemoved(v string) {
	o.CornerRemoved = &v
}

// GetPuncturedDocument returns the PuncturedDocument field value if set, zero value otherwise.
func (o *DocumentCDQReasons) GetPuncturedDocument() string {
	if o == nil || IsNil(o.PuncturedDocument) {
		var ret string
		return ret
	}
	return *o.PuncturedDocument
}

// GetPuncturedDocumentOk returns a tuple with the PuncturedDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentCDQReasons) GetPuncturedDocumentOk() (*string, bool) {
	if o == nil || IsNil(o.PuncturedDocument) {
		return nil, false
	}
	return o.PuncturedDocument, true
}

// HasPuncturedDocument returns a boolean if a field has been set.
func (o *DocumentCDQReasons) HasPuncturedDocument() bool {
	if o != nil && !IsNil(o.PuncturedDocument) {
		return true
	}

	return false
}

// SetPuncturedDocument gets a reference to the given string and assigns it to the PuncturedDocument field.
func (o *DocumentCDQReasons) SetPuncturedDocument(v string) {
	o.PuncturedDocument = &v
}

// GetMissingBack returns the MissingBack field value if set, zero value otherwise.
func (o *DocumentCDQReasons) GetMissingBack() string {
	if o == nil || IsNil(o.MissingBack) {
		var ret string
		return ret
	}
	return *o.MissingBack
}

// GetMissingBackOk returns a tuple with the MissingBack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentCDQReasons) GetMissingBackOk() (*string, bool) {
	if o == nil || IsNil(o.MissingBack) {
		return nil, false
	}
	return o.MissingBack, true
}

// HasMissingBack returns a boolean if a field has been set.
func (o *DocumentCDQReasons) HasMissingBack() bool {
	if o != nil && !IsNil(o.MissingBack) {
		return true
	}

	return false
}

// SetMissingBack gets a reference to the given string and assigns it to the MissingBack field.
func (o *DocumentCDQReasons) SetMissingBack(v string) {
	o.MissingBack = &v
}

// GetDigitalDocument returns the DigitalDocument field value if set, zero value otherwise.
func (o *DocumentCDQReasons) GetDigitalDocument() string {
	if o == nil || IsNil(o.DigitalDocument) {
		var ret string
		return ret
	}
	return *o.DigitalDocument
}

// GetDigitalDocumentOk returns a tuple with the DigitalDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentCDQReasons) GetDigitalDocumentOk() (*string, bool) {
	if o == nil || IsNil(o.DigitalDocument) {
		return nil, false
	}
	return o.DigitalDocument, true
}

// HasDigitalDocument returns a boolean if a field has been set.
func (o *DocumentCDQReasons) HasDigitalDocument() bool {
	if o != nil && !IsNil(o.DigitalDocument) {
		return true
	}

	return false
}

// SetDigitalDocument gets a reference to the given string and assigns it to the DigitalDocument field.
func (o *DocumentCDQReasons) SetDigitalDocument(v string) {
	o.DigitalDocument = &v
}

func (o DocumentCDQReasons) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentCDQReasons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObscuredDataPoints) {
		toSerialize["obscured_data_points"] = o.ObscuredDataPoints
	}
	if !IsNil(o.ObscuredSecurityFeatures) {
		toSerialize["obscured_security_features"] = o.ObscuredSecurityFeatures
	}
	if !IsNil(o.AbnormalDocumentFeatures) {
		toSerialize["abnormal_document_features"] = o.AbnormalDocumentFeatures
	}
	if !IsNil(o.WatermarksDigitalTextOverlay) {
		toSerialize["watermarks_digital_text_overlay"] = o.WatermarksDigitalTextOverlay
	}
	if !IsNil(o.CornerRemoved) {
		toSerialize["corner_removed"] = o.CornerRemoved
	}
	if !IsNil(o.PuncturedDocument) {
		toSerialize["punctured_document"] = o.PuncturedDocument
	}
	if !IsNil(o.MissingBack) {
		toSerialize["missing_back"] = o.MissingBack
	}
	if !IsNil(o.DigitalDocument) {
		toSerialize["digital_document"] = o.DigitalDocument
	}
	return toSerialize, nil
}

type NullableDocumentCDQReasons struct {
	value *DocumentCDQReasons
	isSet bool
}

func (v NullableDocumentCDQReasons) Get() *DocumentCDQReasons {
	return v.value
}

func (v *NullableDocumentCDQReasons) Set(val *DocumentCDQReasons) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentCDQReasons) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentCDQReasons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentCDQReasons(val *DocumentCDQReasons) *NullableDocumentCDQReasons {
	return &NullableDocumentCDQReasons{value: val, isSet: true}
}

func (v NullableDocumentCDQReasons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentCDQReasons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
