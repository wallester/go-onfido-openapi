/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the DocumentBreakdownAgeValidationBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentBreakdownAgeValidationBreakdown{}

// DocumentBreakdownAgeValidationBreakdown struct for DocumentBreakdownAgeValidationBreakdown
type DocumentBreakdownAgeValidationBreakdown struct {
	MinimumAcceptedAge *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"minimum_accepted_age,omitempty"`
}

// NewDocumentBreakdownAgeValidationBreakdown instantiates a new DocumentBreakdownAgeValidationBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentBreakdownAgeValidationBreakdown() *DocumentBreakdownAgeValidationBreakdown {
	this := DocumentBreakdownAgeValidationBreakdown{}
	return &this
}

// NewDocumentBreakdownAgeValidationBreakdownWithDefaults instantiates a new DocumentBreakdownAgeValidationBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentBreakdownAgeValidationBreakdownWithDefaults() *DocumentBreakdownAgeValidationBreakdown {
	this := DocumentBreakdownAgeValidationBreakdown{}
	return &this
}

// GetMinimumAcceptedAge returns the MinimumAcceptedAge field value if set, zero value otherwise.
func (o *DocumentBreakdownAgeValidationBreakdown) GetMinimumAcceptedAge() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.MinimumAcceptedAge) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.MinimumAcceptedAge
}

// GetMinimumAcceptedAgeOk returns a tuple with the MinimumAcceptedAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentBreakdownAgeValidationBreakdown) GetMinimumAcceptedAgeOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.MinimumAcceptedAge) {
		return nil, false
	}
	return o.MinimumAcceptedAge, true
}

// HasMinimumAcceptedAge returns a boolean if a field has been set.
func (o *DocumentBreakdownAgeValidationBreakdown) HasMinimumAcceptedAge() bool {
	if o != nil && !IsNil(o.MinimumAcceptedAge) {
		return true
	}

	return false
}

// SetMinimumAcceptedAge gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the MinimumAcceptedAge field.
func (o *DocumentBreakdownAgeValidationBreakdown) SetMinimumAcceptedAge(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.MinimumAcceptedAge = &v
}

func (o DocumentBreakdownAgeValidationBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentBreakdownAgeValidationBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinimumAcceptedAge) {
		toSerialize["minimum_accepted_age"] = o.MinimumAcceptedAge
	}
	return toSerialize, nil
}

type NullableDocumentBreakdownAgeValidationBreakdown struct {
	value *DocumentBreakdownAgeValidationBreakdown
	isSet bool
}

func (v NullableDocumentBreakdownAgeValidationBreakdown) Get() *DocumentBreakdownAgeValidationBreakdown {
	return v.value
}

func (v *NullableDocumentBreakdownAgeValidationBreakdown) Set(val *DocumentBreakdownAgeValidationBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentBreakdownAgeValidationBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentBreakdownAgeValidationBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentBreakdownAgeValidationBreakdown(val *DocumentBreakdownAgeValidationBreakdown) *NullableDocumentBreakdownAgeValidationBreakdown {
	return &NullableDocumentBreakdownAgeValidationBreakdown{value: val, isSet: true}
}

func (v NullableDocumentBreakdownAgeValidationBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentBreakdownAgeValidationBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
