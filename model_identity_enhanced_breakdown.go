/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the IdentityEnhancedBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityEnhancedBreakdown{}

// IdentityEnhancedBreakdown struct for IdentityEnhancedBreakdown
type IdentityEnhancedBreakdown struct {
	Sources     *IdentityEnhancedBreakdownSources     `json:"sources,omitempty"`
	Address     *IdentityEnhancedBreakdownAddress     `json:"address,omitempty"`
	DateOfBirth *IdentityEnhancedBreakdownDateOfBirth `json:"date_of_birth,omitempty"`
	Mortality   *IdentityEnhancedBreakdownMortality   `json:"mortality,omitempty"`
}

// NewIdentityEnhancedBreakdown instantiates a new IdentityEnhancedBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityEnhancedBreakdown() *IdentityEnhancedBreakdown {
	this := IdentityEnhancedBreakdown{}
	return &this
}

// NewIdentityEnhancedBreakdownWithDefaults instantiates a new IdentityEnhancedBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityEnhancedBreakdownWithDefaults() *IdentityEnhancedBreakdown {
	this := IdentityEnhancedBreakdown{}
	return &this
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *IdentityEnhancedBreakdown) GetSources() IdentityEnhancedBreakdownSources {
	if o == nil || IsNil(o.Sources) {
		var ret IdentityEnhancedBreakdownSources
		return ret
	}
	return *o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEnhancedBreakdown) GetSourcesOk() (*IdentityEnhancedBreakdownSources, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *IdentityEnhancedBreakdown) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given IdentityEnhancedBreakdownSources and assigns it to the Sources field.
func (o *IdentityEnhancedBreakdown) SetSources(v IdentityEnhancedBreakdownSources) {
	o.Sources = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *IdentityEnhancedBreakdown) GetAddress() IdentityEnhancedBreakdownAddress {
	if o == nil || IsNil(o.Address) {
		var ret IdentityEnhancedBreakdownAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEnhancedBreakdown) GetAddressOk() (*IdentityEnhancedBreakdownAddress, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *IdentityEnhancedBreakdown) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given IdentityEnhancedBreakdownAddress and assigns it to the Address field.
func (o *IdentityEnhancedBreakdown) SetAddress(v IdentityEnhancedBreakdownAddress) {
	o.Address = &v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *IdentityEnhancedBreakdown) GetDateOfBirth() IdentityEnhancedBreakdownDateOfBirth {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret IdentityEnhancedBreakdownDateOfBirth
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEnhancedBreakdown) GetDateOfBirthOk() (*IdentityEnhancedBreakdownDateOfBirth, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *IdentityEnhancedBreakdown) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given IdentityEnhancedBreakdownDateOfBirth and assigns it to the DateOfBirth field.
func (o *IdentityEnhancedBreakdown) SetDateOfBirth(v IdentityEnhancedBreakdownDateOfBirth) {
	o.DateOfBirth = &v
}

// GetMortality returns the Mortality field value if set, zero value otherwise.
func (o *IdentityEnhancedBreakdown) GetMortality() IdentityEnhancedBreakdownMortality {
	if o == nil || IsNil(o.Mortality) {
		var ret IdentityEnhancedBreakdownMortality
		return ret
	}
	return *o.Mortality
}

// GetMortalityOk returns a tuple with the Mortality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEnhancedBreakdown) GetMortalityOk() (*IdentityEnhancedBreakdownMortality, bool) {
	if o == nil || IsNil(o.Mortality) {
		return nil, false
	}
	return o.Mortality, true
}

// HasMortality returns a boolean if a field has been set.
func (o *IdentityEnhancedBreakdown) HasMortality() bool {
	if o != nil && !IsNil(o.Mortality) {
		return true
	}

	return false
}

// SetMortality gets a reference to the given IdentityEnhancedBreakdownMortality and assigns it to the Mortality field.
func (o *IdentityEnhancedBreakdown) SetMortality(v IdentityEnhancedBreakdownMortality) {
	o.Mortality = &v
}

func (o IdentityEnhancedBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityEnhancedBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.DateOfBirth) {
		toSerialize["date_of_birth"] = o.DateOfBirth
	}
	if !IsNil(o.Mortality) {
		toSerialize["mortality"] = o.Mortality
	}
	return toSerialize, nil
}

type NullableIdentityEnhancedBreakdown struct {
	value *IdentityEnhancedBreakdown
	isSet bool
}

func (v NullableIdentityEnhancedBreakdown) Get() *IdentityEnhancedBreakdown {
	return v.value
}

func (v *NullableIdentityEnhancedBreakdown) Set(val *IdentityEnhancedBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityEnhancedBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityEnhancedBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityEnhancedBreakdown(val *IdentityEnhancedBreakdown) *NullableIdentityEnhancedBreakdown {
	return &NullableIdentityEnhancedBreakdown{value: val, isSet: true}
}

func (v NullableIdentityEnhancedBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityEnhancedBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
