/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the ProofOfAddressBreakdownDataComparisonBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProofOfAddressBreakdownDataComparisonBreakdown{}

// ProofOfAddressBreakdownDataComparisonBreakdown struct for ProofOfAddressBreakdownDataComparisonBreakdown
type ProofOfAddressBreakdownDataComparisonBreakdown struct {
	Address   *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"address,omitempty"`
	FirstName *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"first_name,omitempty"`
	LastName  *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"last_name,omitempty"`
}

// NewProofOfAddressBreakdownDataComparisonBreakdown instantiates a new ProofOfAddressBreakdownDataComparisonBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProofOfAddressBreakdownDataComparisonBreakdown() *ProofOfAddressBreakdownDataComparisonBreakdown {
	this := ProofOfAddressBreakdownDataComparisonBreakdown{}
	return &this
}

// NewProofOfAddressBreakdownDataComparisonBreakdownWithDefaults instantiates a new ProofOfAddressBreakdownDataComparisonBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProofOfAddressBreakdownDataComparisonBreakdownWithDefaults() *ProofOfAddressBreakdownDataComparisonBreakdown {
	this := ProofOfAddressBreakdownDataComparisonBreakdown{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ProofOfAddressBreakdownDataComparisonBreakdown) GetAddress() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.Address) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProofOfAddressBreakdownDataComparisonBreakdown) GetAddressOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ProofOfAddressBreakdownDataComparisonBreakdown) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the Address field.
func (o *ProofOfAddressBreakdownDataComparisonBreakdown) SetAddress(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.Address = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *ProofOfAddressBreakdownDataComparisonBreakdown) GetFirstName() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.FirstName) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProofOfAddressBreakdownDataComparisonBreakdown) GetFirstNameOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *ProofOfAddressBreakdownDataComparisonBreakdown) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the FirstName field.
func (o *ProofOfAddressBreakdownDataComparisonBreakdown) SetFirstName(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *ProofOfAddressBreakdownDataComparisonBreakdown) GetLastName() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.LastName) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProofOfAddressBreakdownDataComparisonBreakdown) GetLastNameOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *ProofOfAddressBreakdownDataComparisonBreakdown) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the LastName field.
func (o *ProofOfAddressBreakdownDataComparisonBreakdown) SetLastName(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.LastName = &v
}

func (o ProofOfAddressBreakdownDataComparisonBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProofOfAddressBreakdownDataComparisonBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	return toSerialize, nil
}

type NullableProofOfAddressBreakdownDataComparisonBreakdown struct {
	value *ProofOfAddressBreakdownDataComparisonBreakdown
	isSet bool
}

func (v NullableProofOfAddressBreakdownDataComparisonBreakdown) Get() *ProofOfAddressBreakdownDataComparisonBreakdown {
	return v.value
}

func (v *NullableProofOfAddressBreakdownDataComparisonBreakdown) Set(val *ProofOfAddressBreakdownDataComparisonBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableProofOfAddressBreakdownDataComparisonBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableProofOfAddressBreakdownDataComparisonBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProofOfAddressBreakdownDataComparisonBreakdown(val *ProofOfAddressBreakdownDataComparisonBreakdown) *NullableProofOfAddressBreakdownDataComparisonBreakdown {
	return &NullableProofOfAddressBreakdownDataComparisonBreakdown{value: val, isSet: true}
}

func (v NullableProofOfAddressBreakdownDataComparisonBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProofOfAddressBreakdownDataComparisonBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
