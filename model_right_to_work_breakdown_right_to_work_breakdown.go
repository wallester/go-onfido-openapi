/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the RightToWorkBreakdownRightToWorkBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RightToWorkBreakdownRightToWorkBreakdown{}

// RightToWorkBreakdownRightToWorkBreakdown struct for RightToWorkBreakdownRightToWorkBreakdown
type RightToWorkBreakdownRightToWorkBreakdown struct {
	ApplicantHasTheRightToWork *RightToWorkBreakdownRightToWorkBreakdownApplicantHasTheRightToWork `json:"applicant_has_the_right_to_work,omitempty"`
}

// NewRightToWorkBreakdownRightToWorkBreakdown instantiates a new RightToWorkBreakdownRightToWorkBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRightToWorkBreakdownRightToWorkBreakdown() *RightToWorkBreakdownRightToWorkBreakdown {
	this := RightToWorkBreakdownRightToWorkBreakdown{}
	return &this
}

// NewRightToWorkBreakdownRightToWorkBreakdownWithDefaults instantiates a new RightToWorkBreakdownRightToWorkBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRightToWorkBreakdownRightToWorkBreakdownWithDefaults() *RightToWorkBreakdownRightToWorkBreakdown {
	this := RightToWorkBreakdownRightToWorkBreakdown{}
	return &this
}

// GetApplicantHasTheRightToWork returns the ApplicantHasTheRightToWork field value if set, zero value otherwise.
func (o *RightToWorkBreakdownRightToWorkBreakdown) GetApplicantHasTheRightToWork() RightToWorkBreakdownRightToWorkBreakdownApplicantHasTheRightToWork {
	if o == nil || IsNil(o.ApplicantHasTheRightToWork) {
		var ret RightToWorkBreakdownRightToWorkBreakdownApplicantHasTheRightToWork
		return ret
	}
	return *o.ApplicantHasTheRightToWork
}

// GetApplicantHasTheRightToWorkOk returns a tuple with the ApplicantHasTheRightToWork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdownRightToWorkBreakdown) GetApplicantHasTheRightToWorkOk() (*RightToWorkBreakdownRightToWorkBreakdownApplicantHasTheRightToWork, bool) {
	if o == nil || IsNil(o.ApplicantHasTheRightToWork) {
		return nil, false
	}
	return o.ApplicantHasTheRightToWork, true
}

// HasApplicantHasTheRightToWork returns a boolean if a field has been set.
func (o *RightToWorkBreakdownRightToWorkBreakdown) HasApplicantHasTheRightToWork() bool {
	if o != nil && !IsNil(o.ApplicantHasTheRightToWork) {
		return true
	}

	return false
}

// SetApplicantHasTheRightToWork gets a reference to the given RightToWorkBreakdownRightToWorkBreakdownApplicantHasTheRightToWork and assigns it to the ApplicantHasTheRightToWork field.
func (o *RightToWorkBreakdownRightToWorkBreakdown) SetApplicantHasTheRightToWork(v RightToWorkBreakdownRightToWorkBreakdownApplicantHasTheRightToWork) {
	o.ApplicantHasTheRightToWork = &v
}

func (o RightToWorkBreakdownRightToWorkBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RightToWorkBreakdownRightToWorkBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicantHasTheRightToWork) {
		toSerialize["applicant_has_the_right_to_work"] = o.ApplicantHasTheRightToWork
	}
	return toSerialize, nil
}

type NullableRightToWorkBreakdownRightToWorkBreakdown struct {
	value *RightToWorkBreakdownRightToWorkBreakdown
	isSet bool
}

func (v NullableRightToWorkBreakdownRightToWorkBreakdown) Get() *RightToWorkBreakdownRightToWorkBreakdown {
	return v.value
}

func (v *NullableRightToWorkBreakdownRightToWorkBreakdown) Set(val *RightToWorkBreakdownRightToWorkBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableRightToWorkBreakdownRightToWorkBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableRightToWorkBreakdownRightToWorkBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRightToWorkBreakdownRightToWorkBreakdown(val *RightToWorkBreakdownRightToWorkBreakdown) *NullableRightToWorkBreakdownRightToWorkBreakdown {
	return &NullableRightToWorkBreakdownRightToWorkBreakdown{value: val, isSet: true}
}

func (v NullableRightToWorkBreakdownRightToWorkBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRightToWorkBreakdownRightToWorkBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
