/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the RightToWorkBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RightToWorkBreakdown{}

// RightToWorkBreakdown struct for RightToWorkBreakdown
type RightToWorkBreakdown struct {
	RightToWork         *RightToWorkBreakdownRightToWork         `json:"right_to_work,omitempty"`
	DataComparison      *DocumentBreakdownDataComparison         `json:"data_comparison,omitempty"`
	DataValidation      *RightToWorkBreakdownDataValidation      `json:"data_validation,omitempty"`
	ImageIntegrity      *RightToWorkBreakdownImageIntegrity      `json:"image_integrity,omitempty"`
	VisualAuthenticity  *RightToWorkBreakdownVisualAuthenticity  `json:"visual_authenticity,omitempty"`
	DataConsistency     *RightToWorkBreakdownDataConsistency     `json:"data_consistency,omitempty"`
	PoliceRecord        *DocumentBreakdownPoliceRecord           `json:"police_record,omitempty"`
	CompromisedDocument *DocumentBreakdownCompromisedDocument    `json:"compromised_document,omitempty"`
	AgeValidation       *RightToWorkBreakdownAgeValidation       `json:"age_validation,omitempty"`
	ShareCodeValidation *RightToWorkBreakdownShareCodeValidation `json:"share_code_validation,omitempty"`
}

// NewRightToWorkBreakdown instantiates a new RightToWorkBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRightToWorkBreakdown() *RightToWorkBreakdown {
	this := RightToWorkBreakdown{}
	return &this
}

// NewRightToWorkBreakdownWithDefaults instantiates a new RightToWorkBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRightToWorkBreakdownWithDefaults() *RightToWorkBreakdown {
	this := RightToWorkBreakdown{}
	return &this
}

// GetRightToWork returns the RightToWork field value if set, zero value otherwise.
func (o *RightToWorkBreakdown) GetRightToWork() RightToWorkBreakdownRightToWork {
	if o == nil || IsNil(o.RightToWork) {
		var ret RightToWorkBreakdownRightToWork
		return ret
	}
	return *o.RightToWork
}

// GetRightToWorkOk returns a tuple with the RightToWork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdown) GetRightToWorkOk() (*RightToWorkBreakdownRightToWork, bool) {
	if o == nil || IsNil(o.RightToWork) {
		return nil, false
	}
	return o.RightToWork, true
}

// HasRightToWork returns a boolean if a field has been set.
func (o *RightToWorkBreakdown) HasRightToWork() bool {
	if o != nil && !IsNil(o.RightToWork) {
		return true
	}

	return false
}

// SetRightToWork gets a reference to the given RightToWorkBreakdownRightToWork and assigns it to the RightToWork field.
func (o *RightToWorkBreakdown) SetRightToWork(v RightToWorkBreakdownRightToWork) {
	o.RightToWork = &v
}

// GetDataComparison returns the DataComparison field value if set, zero value otherwise.
func (o *RightToWorkBreakdown) GetDataComparison() DocumentBreakdownDataComparison {
	if o == nil || IsNil(o.DataComparison) {
		var ret DocumentBreakdownDataComparison
		return ret
	}
	return *o.DataComparison
}

// GetDataComparisonOk returns a tuple with the DataComparison field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdown) GetDataComparisonOk() (*DocumentBreakdownDataComparison, bool) {
	if o == nil || IsNil(o.DataComparison) {
		return nil, false
	}
	return o.DataComparison, true
}

// HasDataComparison returns a boolean if a field has been set.
func (o *RightToWorkBreakdown) HasDataComparison() bool {
	if o != nil && !IsNil(o.DataComparison) {
		return true
	}

	return false
}

// SetDataComparison gets a reference to the given DocumentBreakdownDataComparison and assigns it to the DataComparison field.
func (o *RightToWorkBreakdown) SetDataComparison(v DocumentBreakdownDataComparison) {
	o.DataComparison = &v
}

// GetDataValidation returns the DataValidation field value if set, zero value otherwise.
func (o *RightToWorkBreakdown) GetDataValidation() RightToWorkBreakdownDataValidation {
	if o == nil || IsNil(o.DataValidation) {
		var ret RightToWorkBreakdownDataValidation
		return ret
	}
	return *o.DataValidation
}

// GetDataValidationOk returns a tuple with the DataValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdown) GetDataValidationOk() (*RightToWorkBreakdownDataValidation, bool) {
	if o == nil || IsNil(o.DataValidation) {
		return nil, false
	}
	return o.DataValidation, true
}

// HasDataValidation returns a boolean if a field has been set.
func (o *RightToWorkBreakdown) HasDataValidation() bool {
	if o != nil && !IsNil(o.DataValidation) {
		return true
	}

	return false
}

// SetDataValidation gets a reference to the given RightToWorkBreakdownDataValidation and assigns it to the DataValidation field.
func (o *RightToWorkBreakdown) SetDataValidation(v RightToWorkBreakdownDataValidation) {
	o.DataValidation = &v
}

// GetImageIntegrity returns the ImageIntegrity field value if set, zero value otherwise.
func (o *RightToWorkBreakdown) GetImageIntegrity() RightToWorkBreakdownImageIntegrity {
	if o == nil || IsNil(o.ImageIntegrity) {
		var ret RightToWorkBreakdownImageIntegrity
		return ret
	}
	return *o.ImageIntegrity
}

// GetImageIntegrityOk returns a tuple with the ImageIntegrity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdown) GetImageIntegrityOk() (*RightToWorkBreakdownImageIntegrity, bool) {
	if o == nil || IsNil(o.ImageIntegrity) {
		return nil, false
	}
	return o.ImageIntegrity, true
}

// HasImageIntegrity returns a boolean if a field has been set.
func (o *RightToWorkBreakdown) HasImageIntegrity() bool {
	if o != nil && !IsNil(o.ImageIntegrity) {
		return true
	}

	return false
}

// SetImageIntegrity gets a reference to the given RightToWorkBreakdownImageIntegrity and assigns it to the ImageIntegrity field.
func (o *RightToWorkBreakdown) SetImageIntegrity(v RightToWorkBreakdownImageIntegrity) {
	o.ImageIntegrity = &v
}

// GetVisualAuthenticity returns the VisualAuthenticity field value if set, zero value otherwise.
func (o *RightToWorkBreakdown) GetVisualAuthenticity() RightToWorkBreakdownVisualAuthenticity {
	if o == nil || IsNil(o.VisualAuthenticity) {
		var ret RightToWorkBreakdownVisualAuthenticity
		return ret
	}
	return *o.VisualAuthenticity
}

// GetVisualAuthenticityOk returns a tuple with the VisualAuthenticity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdown) GetVisualAuthenticityOk() (*RightToWorkBreakdownVisualAuthenticity, bool) {
	if o == nil || IsNil(o.VisualAuthenticity) {
		return nil, false
	}
	return o.VisualAuthenticity, true
}

// HasVisualAuthenticity returns a boolean if a field has been set.
func (o *RightToWorkBreakdown) HasVisualAuthenticity() bool {
	if o != nil && !IsNil(o.VisualAuthenticity) {
		return true
	}

	return false
}

// SetVisualAuthenticity gets a reference to the given RightToWorkBreakdownVisualAuthenticity and assigns it to the VisualAuthenticity field.
func (o *RightToWorkBreakdown) SetVisualAuthenticity(v RightToWorkBreakdownVisualAuthenticity) {
	o.VisualAuthenticity = &v
}

// GetDataConsistency returns the DataConsistency field value if set, zero value otherwise.
func (o *RightToWorkBreakdown) GetDataConsistency() RightToWorkBreakdownDataConsistency {
	if o == nil || IsNil(o.DataConsistency) {
		var ret RightToWorkBreakdownDataConsistency
		return ret
	}
	return *o.DataConsistency
}

// GetDataConsistencyOk returns a tuple with the DataConsistency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdown) GetDataConsistencyOk() (*RightToWorkBreakdownDataConsistency, bool) {
	if o == nil || IsNil(o.DataConsistency) {
		return nil, false
	}
	return o.DataConsistency, true
}

// HasDataConsistency returns a boolean if a field has been set.
func (o *RightToWorkBreakdown) HasDataConsistency() bool {
	if o != nil && !IsNil(o.DataConsistency) {
		return true
	}

	return false
}

// SetDataConsistency gets a reference to the given RightToWorkBreakdownDataConsistency and assigns it to the DataConsistency field.
func (o *RightToWorkBreakdown) SetDataConsistency(v RightToWorkBreakdownDataConsistency) {
	o.DataConsistency = &v
}

// GetPoliceRecord returns the PoliceRecord field value if set, zero value otherwise.
func (o *RightToWorkBreakdown) GetPoliceRecord() DocumentBreakdownPoliceRecord {
	if o == nil || IsNil(o.PoliceRecord) {
		var ret DocumentBreakdownPoliceRecord
		return ret
	}
	return *o.PoliceRecord
}

// GetPoliceRecordOk returns a tuple with the PoliceRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdown) GetPoliceRecordOk() (*DocumentBreakdownPoliceRecord, bool) {
	if o == nil || IsNil(o.PoliceRecord) {
		return nil, false
	}
	return o.PoliceRecord, true
}

// HasPoliceRecord returns a boolean if a field has been set.
func (o *RightToWorkBreakdown) HasPoliceRecord() bool {
	if o != nil && !IsNil(o.PoliceRecord) {
		return true
	}

	return false
}

// SetPoliceRecord gets a reference to the given DocumentBreakdownPoliceRecord and assigns it to the PoliceRecord field.
func (o *RightToWorkBreakdown) SetPoliceRecord(v DocumentBreakdownPoliceRecord) {
	o.PoliceRecord = &v
}

// GetCompromisedDocument returns the CompromisedDocument field value if set, zero value otherwise.
func (o *RightToWorkBreakdown) GetCompromisedDocument() DocumentBreakdownCompromisedDocument {
	if o == nil || IsNil(o.CompromisedDocument) {
		var ret DocumentBreakdownCompromisedDocument
		return ret
	}
	return *o.CompromisedDocument
}

// GetCompromisedDocumentOk returns a tuple with the CompromisedDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdown) GetCompromisedDocumentOk() (*DocumentBreakdownCompromisedDocument, bool) {
	if o == nil || IsNil(o.CompromisedDocument) {
		return nil, false
	}
	return o.CompromisedDocument, true
}

// HasCompromisedDocument returns a boolean if a field has been set.
func (o *RightToWorkBreakdown) HasCompromisedDocument() bool {
	if o != nil && !IsNil(o.CompromisedDocument) {
		return true
	}

	return false
}

// SetCompromisedDocument gets a reference to the given DocumentBreakdownCompromisedDocument and assigns it to the CompromisedDocument field.
func (o *RightToWorkBreakdown) SetCompromisedDocument(v DocumentBreakdownCompromisedDocument) {
	o.CompromisedDocument = &v
}

// GetAgeValidation returns the AgeValidation field value if set, zero value otherwise.
func (o *RightToWorkBreakdown) GetAgeValidation() RightToWorkBreakdownAgeValidation {
	if o == nil || IsNil(o.AgeValidation) {
		var ret RightToWorkBreakdownAgeValidation
		return ret
	}
	return *o.AgeValidation
}

// GetAgeValidationOk returns a tuple with the AgeValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdown) GetAgeValidationOk() (*RightToWorkBreakdownAgeValidation, bool) {
	if o == nil || IsNil(o.AgeValidation) {
		return nil, false
	}
	return o.AgeValidation, true
}

// HasAgeValidation returns a boolean if a field has been set.
func (o *RightToWorkBreakdown) HasAgeValidation() bool {
	if o != nil && !IsNil(o.AgeValidation) {
		return true
	}

	return false
}

// SetAgeValidation gets a reference to the given RightToWorkBreakdownAgeValidation and assigns it to the AgeValidation field.
func (o *RightToWorkBreakdown) SetAgeValidation(v RightToWorkBreakdownAgeValidation) {
	o.AgeValidation = &v
}

// GetShareCodeValidation returns the ShareCodeValidation field value if set, zero value otherwise.
func (o *RightToWorkBreakdown) GetShareCodeValidation() RightToWorkBreakdownShareCodeValidation {
	if o == nil || IsNil(o.ShareCodeValidation) {
		var ret RightToWorkBreakdownShareCodeValidation
		return ret
	}
	return *o.ShareCodeValidation
}

// GetShareCodeValidationOk returns a tuple with the ShareCodeValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdown) GetShareCodeValidationOk() (*RightToWorkBreakdownShareCodeValidation, bool) {
	if o == nil || IsNil(o.ShareCodeValidation) {
		return nil, false
	}
	return o.ShareCodeValidation, true
}

// HasShareCodeValidation returns a boolean if a field has been set.
func (o *RightToWorkBreakdown) HasShareCodeValidation() bool {
	if o != nil && !IsNil(o.ShareCodeValidation) {
		return true
	}

	return false
}

// SetShareCodeValidation gets a reference to the given RightToWorkBreakdownShareCodeValidation and assigns it to the ShareCodeValidation field.
func (o *RightToWorkBreakdown) SetShareCodeValidation(v RightToWorkBreakdownShareCodeValidation) {
	o.ShareCodeValidation = &v
}

func (o RightToWorkBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RightToWorkBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RightToWork) {
		toSerialize["right_to_work"] = o.RightToWork
	}
	if !IsNil(o.DataComparison) {
		toSerialize["data_comparison"] = o.DataComparison
	}
	if !IsNil(o.DataValidation) {
		toSerialize["data_validation"] = o.DataValidation
	}
	if !IsNil(o.ImageIntegrity) {
		toSerialize["image_integrity"] = o.ImageIntegrity
	}
	if !IsNil(o.VisualAuthenticity) {
		toSerialize["visual_authenticity"] = o.VisualAuthenticity
	}
	if !IsNil(o.DataConsistency) {
		toSerialize["data_consistency"] = o.DataConsistency
	}
	if !IsNil(o.PoliceRecord) {
		toSerialize["police_record"] = o.PoliceRecord
	}
	if !IsNil(o.CompromisedDocument) {
		toSerialize["compromised_document"] = o.CompromisedDocument
	}
	if !IsNil(o.AgeValidation) {
		toSerialize["age_validation"] = o.AgeValidation
	}
	if !IsNil(o.ShareCodeValidation) {
		toSerialize["share_code_validation"] = o.ShareCodeValidation
	}
	return toSerialize, nil
}

type NullableRightToWorkBreakdown struct {
	value *RightToWorkBreakdown
	isSet bool
}

func (v NullableRightToWorkBreakdown) Get() *RightToWorkBreakdown {
	return v.value
}

func (v *NullableRightToWorkBreakdown) Set(val *RightToWorkBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableRightToWorkBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableRightToWorkBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRightToWorkBreakdown(val *RightToWorkBreakdown) *NullableRightToWorkBreakdown {
	return &NullableRightToWorkBreakdown{value: val, isSet: true}
}

func (v NullableRightToWorkBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRightToWorkBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
