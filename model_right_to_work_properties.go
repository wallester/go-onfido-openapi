/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the RightToWorkProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RightToWorkProperties{}

// RightToWorkProperties Returns the information contained in the submitted document.
type RightToWorkProperties struct {
	Nationality      *string                                  `json:"nationality,omitempty"`
	LastName         *string                                  `json:"last_name,omitempty"`
	IssuingCountry   *string                                  `json:"issuing_country,omitempty"`
	Gender           *string                                  `json:"gender,omitempty"`
	FirstName        *string                                  `json:"first_name,omitempty"`
	DocumentType     *string                                  `json:"document_type,omitempty"`
	DocumentNumbers  []DocumentPropertiesDocumentNumbersInner `json:"document_numbers,omitempty"`
	DateOfExpiry     *string                                  `json:"date_of_expiry,omitempty"`
	DateOfBirth      *string                                  `json:"date_of_birth,omitempty"`
	DocumentVersion  *string                                  `json:"document_version,omitempty"`
	IssuingDate      *string                                  `json:"issuing_date,omitempty"`
	MrzLine1         *string                                  `json:"mrz_line1,omitempty"`
	MrzLine2         *string                                  `json:"mrz_line2,omitempty"`
	PlaceOfBirth     *string                                  `json:"place_of_birth,omitempty"`
	IssuingAuthority *string                                  `json:"issuing_authority,omitempty"`
}

// NewRightToWorkProperties instantiates a new RightToWorkProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRightToWorkProperties() *RightToWorkProperties {
	this := RightToWorkProperties{}
	return &this
}

// NewRightToWorkPropertiesWithDefaults instantiates a new RightToWorkProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRightToWorkPropertiesWithDefaults() *RightToWorkProperties {
	this := RightToWorkProperties{}
	return &this
}

// GetNationality returns the Nationality field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetNationality() string {
	if o == nil || IsNil(o.Nationality) {
		var ret string
		return ret
	}
	return *o.Nationality
}

// GetNationalityOk returns a tuple with the Nationality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetNationalityOk() (*string, bool) {
	if o == nil || IsNil(o.Nationality) {
		return nil, false
	}
	return o.Nationality, true
}

// HasNationality returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasNationality() bool {
	if o != nil && !IsNil(o.Nationality) {
		return true
	}

	return false
}

// SetNationality gets a reference to the given string and assigns it to the Nationality field.
func (o *RightToWorkProperties) SetNationality(v string) {
	o.Nationality = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *RightToWorkProperties) SetLastName(v string) {
	o.LastName = &v
}

// GetIssuingCountry returns the IssuingCountry field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetIssuingCountry() string {
	if o == nil || IsNil(o.IssuingCountry) {
		var ret string
		return ret
	}
	return *o.IssuingCountry
}

// GetIssuingCountryOk returns a tuple with the IssuingCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetIssuingCountryOk() (*string, bool) {
	if o == nil || IsNil(o.IssuingCountry) {
		return nil, false
	}
	return o.IssuingCountry, true
}

// HasIssuingCountry returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasIssuingCountry() bool {
	if o != nil && !IsNil(o.IssuingCountry) {
		return true
	}

	return false
}

// SetIssuingCountry gets a reference to the given string and assigns it to the IssuingCountry field.
func (o *RightToWorkProperties) SetIssuingCountry(v string) {
	o.IssuingCountry = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *RightToWorkProperties) SetGender(v string) {
	o.Gender = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *RightToWorkProperties) SetFirstName(v string) {
	o.FirstName = &v
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetDocumentType() string {
	if o == nil || IsNil(o.DocumentType) {
		var ret string
		return ret
	}
	return *o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetDocumentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentType) {
		return nil, false
	}
	return o.DocumentType, true
}

// HasDocumentType returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasDocumentType() bool {
	if o != nil && !IsNil(o.DocumentType) {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given string and assigns it to the DocumentType field.
func (o *RightToWorkProperties) SetDocumentType(v string) {
	o.DocumentType = &v
}

// GetDocumentNumbers returns the DocumentNumbers field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetDocumentNumbers() []DocumentPropertiesDocumentNumbersInner {
	if o == nil || IsNil(o.DocumentNumbers) {
		var ret []DocumentPropertiesDocumentNumbersInner
		return ret
	}
	return o.DocumentNumbers
}

// GetDocumentNumbersOk returns a tuple with the DocumentNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetDocumentNumbersOk() ([]DocumentPropertiesDocumentNumbersInner, bool) {
	if o == nil || IsNil(o.DocumentNumbers) {
		return nil, false
	}
	return o.DocumentNumbers, true
}

// HasDocumentNumbers returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasDocumentNumbers() bool {
	if o != nil && !IsNil(o.DocumentNumbers) {
		return true
	}

	return false
}

// SetDocumentNumbers gets a reference to the given []DocumentPropertiesDocumentNumbersInner and assigns it to the DocumentNumbers field.
func (o *RightToWorkProperties) SetDocumentNumbers(v []DocumentPropertiesDocumentNumbersInner) {
	o.DocumentNumbers = v
}

// GetDateOfExpiry returns the DateOfExpiry field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetDateOfExpiry() string {
	if o == nil || IsNil(o.DateOfExpiry) {
		var ret string
		return ret
	}
	return *o.DateOfExpiry
}

// GetDateOfExpiryOk returns a tuple with the DateOfExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetDateOfExpiryOk() (*string, bool) {
	if o == nil || IsNil(o.DateOfExpiry) {
		return nil, false
	}
	return o.DateOfExpiry, true
}

// HasDateOfExpiry returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasDateOfExpiry() bool {
	if o != nil && !IsNil(o.DateOfExpiry) {
		return true
	}

	return false
}

// SetDateOfExpiry gets a reference to the given string and assigns it to the DateOfExpiry field.
func (o *RightToWorkProperties) SetDateOfExpiry(v string) {
	o.DateOfExpiry = &v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetDateOfBirth() string {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret string
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetDateOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given string and assigns it to the DateOfBirth field.
func (o *RightToWorkProperties) SetDateOfBirth(v string) {
	o.DateOfBirth = &v
}

// GetDocumentVersion returns the DocumentVersion field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetDocumentVersion() string {
	if o == nil || IsNil(o.DocumentVersion) {
		var ret string
		return ret
	}
	return *o.DocumentVersion
}

// GetDocumentVersionOk returns a tuple with the DocumentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetDocumentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentVersion) {
		return nil, false
	}
	return o.DocumentVersion, true
}

// HasDocumentVersion returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasDocumentVersion() bool {
	if o != nil && !IsNil(o.DocumentVersion) {
		return true
	}

	return false
}

// SetDocumentVersion gets a reference to the given string and assigns it to the DocumentVersion field.
func (o *RightToWorkProperties) SetDocumentVersion(v string) {
	o.DocumentVersion = &v
}

// GetIssuingDate returns the IssuingDate field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetIssuingDate() string {
	if o == nil || IsNil(o.IssuingDate) {
		var ret string
		return ret
	}
	return *o.IssuingDate
}

// GetIssuingDateOk returns a tuple with the IssuingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetIssuingDateOk() (*string, bool) {
	if o == nil || IsNil(o.IssuingDate) {
		return nil, false
	}
	return o.IssuingDate, true
}

// HasIssuingDate returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasIssuingDate() bool {
	if o != nil && !IsNil(o.IssuingDate) {
		return true
	}

	return false
}

// SetIssuingDate gets a reference to the given string and assigns it to the IssuingDate field.
func (o *RightToWorkProperties) SetIssuingDate(v string) {
	o.IssuingDate = &v
}

// GetMrzLine1 returns the MrzLine1 field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetMrzLine1() string {
	if o == nil || IsNil(o.MrzLine1) {
		var ret string
		return ret
	}
	return *o.MrzLine1
}

// GetMrzLine1Ok returns a tuple with the MrzLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetMrzLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.MrzLine1) {
		return nil, false
	}
	return o.MrzLine1, true
}

// HasMrzLine1 returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasMrzLine1() bool {
	if o != nil && !IsNil(o.MrzLine1) {
		return true
	}

	return false
}

// SetMrzLine1 gets a reference to the given string and assigns it to the MrzLine1 field.
func (o *RightToWorkProperties) SetMrzLine1(v string) {
	o.MrzLine1 = &v
}

// GetMrzLine2 returns the MrzLine2 field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetMrzLine2() string {
	if o == nil || IsNil(o.MrzLine2) {
		var ret string
		return ret
	}
	return *o.MrzLine2
}

// GetMrzLine2Ok returns a tuple with the MrzLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetMrzLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.MrzLine2) {
		return nil, false
	}
	return o.MrzLine2, true
}

// HasMrzLine2 returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasMrzLine2() bool {
	if o != nil && !IsNil(o.MrzLine2) {
		return true
	}

	return false
}

// SetMrzLine2 gets a reference to the given string and assigns it to the MrzLine2 field.
func (o *RightToWorkProperties) SetMrzLine2(v string) {
	o.MrzLine2 = &v
}

// GetPlaceOfBirth returns the PlaceOfBirth field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetPlaceOfBirth() string {
	if o == nil || IsNil(o.PlaceOfBirth) {
		var ret string
		return ret
	}
	return *o.PlaceOfBirth
}

// GetPlaceOfBirthOk returns a tuple with the PlaceOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetPlaceOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.PlaceOfBirth) {
		return nil, false
	}
	return o.PlaceOfBirth, true
}

// HasPlaceOfBirth returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasPlaceOfBirth() bool {
	if o != nil && !IsNil(o.PlaceOfBirth) {
		return true
	}

	return false
}

// SetPlaceOfBirth gets a reference to the given string and assigns it to the PlaceOfBirth field.
func (o *RightToWorkProperties) SetPlaceOfBirth(v string) {
	o.PlaceOfBirth = &v
}

// GetIssuingAuthority returns the IssuingAuthority field value if set, zero value otherwise.
func (o *RightToWorkProperties) GetIssuingAuthority() string {
	if o == nil || IsNil(o.IssuingAuthority) {
		var ret string
		return ret
	}
	return *o.IssuingAuthority
}

// GetIssuingAuthorityOk returns a tuple with the IssuingAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkProperties) GetIssuingAuthorityOk() (*string, bool) {
	if o == nil || IsNil(o.IssuingAuthority) {
		return nil, false
	}
	return o.IssuingAuthority, true
}

// HasIssuingAuthority returns a boolean if a field has been set.
func (o *RightToWorkProperties) HasIssuingAuthority() bool {
	if o != nil && !IsNil(o.IssuingAuthority) {
		return true
	}

	return false
}

// SetIssuingAuthority gets a reference to the given string and assigns it to the IssuingAuthority field.
func (o *RightToWorkProperties) SetIssuingAuthority(v string) {
	o.IssuingAuthority = &v
}

func (o RightToWorkProperties) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RightToWorkProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nationality) {
		toSerialize["nationality"] = o.Nationality
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.IssuingCountry) {
		toSerialize["issuing_country"] = o.IssuingCountry
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.DocumentType) {
		toSerialize["document_type"] = o.DocumentType
	}
	if !IsNil(o.DocumentNumbers) {
		toSerialize["document_numbers"] = o.DocumentNumbers
	}
	if !IsNil(o.DateOfExpiry) {
		toSerialize["date_of_expiry"] = o.DateOfExpiry
	}
	if !IsNil(o.DateOfBirth) {
		toSerialize["date_of_birth"] = o.DateOfBirth
	}
	if !IsNil(o.DocumentVersion) {
		toSerialize["document_version"] = o.DocumentVersion
	}
	if !IsNil(o.IssuingDate) {
		toSerialize["issuing_date"] = o.IssuingDate
	}
	if !IsNil(o.MrzLine1) {
		toSerialize["mrz_line1"] = o.MrzLine1
	}
	if !IsNil(o.MrzLine2) {
		toSerialize["mrz_line2"] = o.MrzLine2
	}
	if !IsNil(o.PlaceOfBirth) {
		toSerialize["place_of_birth"] = o.PlaceOfBirth
	}
	if !IsNil(o.IssuingAuthority) {
		toSerialize["issuing_authority"] = o.IssuingAuthority
	}
	return toSerialize, nil
}

type NullableRightToWorkProperties struct {
	value *RightToWorkProperties
	isSet bool
}

func (v NullableRightToWorkProperties) Get() *RightToWorkProperties {
	return v.value
}

func (v *NullableRightToWorkProperties) Set(val *RightToWorkProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableRightToWorkProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableRightToWorkProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRightToWorkProperties(val *RightToWorkProperties) *NullableRightToWorkProperties {
	return &NullableRightToWorkProperties{value: val, isSet: true}
}

func (v NullableRightToWorkProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRightToWorkProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
