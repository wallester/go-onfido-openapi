/*
Onfido API v3.6

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onfido_openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/wallester/go-onfido-openapi"
	"testing"
)

func Test_onfido_openapi_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService CancelReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var reportId string

		httpRes, err := apiClient.DefaultAPI.CancelReport(context.Background(), reportId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CompleteTask", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workflowRunId string
		var taskId string

		httpRes, err := apiClient.DefaultAPI.CompleteTask(context.Background(), workflowRunId, taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateApplicant", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CreateApplicant(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateCheck", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CreateCheck(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CreateWebhook(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateWorkflowRun", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CreateWorkflowRun(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var webhookId string

		httpRes, err := apiClient.DefaultAPI.DeleteWebhook(context.Background(), webhookId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DestroyApplicant", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicantId string

		httpRes, err := apiClient.DefaultAPI.DestroyApplicant(context.Background(), applicantId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DownloadCheck", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var checkId string

		httpRes, err := apiClient.DefaultAPI.DownloadCheck(context.Background(), checkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DownloadDocument", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.DefaultAPI.DownloadDocument(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DownloadLivePhoto", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var livePhotoId string

		resp, httpRes, err := apiClient.DefaultAPI.DownloadLivePhoto(context.Background(), livePhotoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DownloadLiveVideo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var liveVideoId string

		resp, httpRes, err := apiClient.DefaultAPI.DownloadLiveVideo(context.Background(), liveVideoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DownloadLiveVideoFrame", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var liveVideoId string

		resp, httpRes, err := apiClient.DefaultAPI.DownloadLiveVideoFrame(context.Background(), liveVideoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService EditWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var webhookId string

		resp, httpRes, err := apiClient.DefaultAPI.EditWebhook(context.Background(), webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService FindAddresses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.FindAddresses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService FindApplicant", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicantId string

		resp, httpRes, err := apiClient.DefaultAPI.FindApplicant(context.Background(), applicantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService FindCheck", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var checkId string

		resp, httpRes, err := apiClient.DefaultAPI.FindCheck(context.Background(), checkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService FindDocument", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var documentId string

		resp, httpRes, err := apiClient.DefaultAPI.FindDocument(context.Background(), documentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService FindLivePhoto", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var livePhotoId string

		resp, httpRes, err := apiClient.DefaultAPI.FindLivePhoto(context.Background(), livePhotoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService FindLiveVideo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var liveVideoId string

		resp, httpRes, err := apiClient.DefaultAPI.FindLiveVideo(context.Background(), liveVideoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService FindReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var reportId string

		resp, httpRes, err := apiClient.DefaultAPI.FindReport(context.Background(), reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService FindWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var webhookId string

		resp, httpRes, err := apiClient.DefaultAPI.FindWebhook(context.Background(), webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GenerateSdkToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GenerateSdkToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListApplicants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ListApplicants(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListChecks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ListChecks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListDocuments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ListDocuments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListLivePhotos", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ListLivePhotos(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListLiveVideos", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ListLiveVideos(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListReports", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ListReports(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListTasks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workflowRunId string

		resp, httpRes, err := apiClient.DefaultAPI.ListTasks(context.Background(), workflowRunId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListWebhooks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ListWebhooks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ListWorkflowRuns", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ListWorkflowRuns(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Ping", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.Ping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RestoreApplicant", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicantId string

		httpRes, err := apiClient.DefaultAPI.RestoreApplicant(context.Background(), applicantId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ResumeCheck", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var checkId string

		httpRes, err := apiClient.DefaultAPI.ResumeCheck(context.Background(), checkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ResumeReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var reportId string

		httpRes, err := apiClient.DefaultAPI.ResumeReport(context.Background(), reportId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RetrieveTask", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workflowRunId string
		var taskId string

		resp, httpRes, err := apiClient.DefaultAPI.RetrieveTask(context.Background(), workflowRunId, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RetrieveWorkflowRun", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workflowRunId string

		resp, httpRes, err := apiClient.DefaultAPI.RetrieveWorkflowRun(context.Background(), workflowRunId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateApplicant", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var applicantId string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateApplicant(context.Background(), applicantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UploadDocument", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.UploadDocument(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UploadLivePhoto", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.UploadLivePhoto(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
