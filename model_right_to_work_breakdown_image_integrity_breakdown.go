/*
Onfido API v3.6

The Onfido API is used to submit check requests.

API version: 3.6.0
Contact: engineering@onfido.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onfido_openapi

import (
	"encoding/json"
)

// checks if the RightToWorkBreakdownImageIntegrityBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RightToWorkBreakdownImageIntegrityBreakdown{}

// RightToWorkBreakdownImageIntegrityBreakdown struct for RightToWorkBreakdownImageIntegrityBreakdown
type RightToWorkBreakdownImageIntegrityBreakdown struct {
	ImageQuality              *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"image_quality,omitempty"`
	SupportedDocument         *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"supported_document,omitempty"`
	ColourPicture             *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"colour_picture,omitempty"`
	ConclusiveDocumentQuality *DocumentBreakdownDataComparisonBreakdownIssuingCountry `json:"conclusive_document_quality,omitempty"`
}

// NewRightToWorkBreakdownImageIntegrityBreakdown instantiates a new RightToWorkBreakdownImageIntegrityBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRightToWorkBreakdownImageIntegrityBreakdown() *RightToWorkBreakdownImageIntegrityBreakdown {
	this := RightToWorkBreakdownImageIntegrityBreakdown{}
	return &this
}

// NewRightToWorkBreakdownImageIntegrityBreakdownWithDefaults instantiates a new RightToWorkBreakdownImageIntegrityBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRightToWorkBreakdownImageIntegrityBreakdownWithDefaults() *RightToWorkBreakdownImageIntegrityBreakdown {
	this := RightToWorkBreakdownImageIntegrityBreakdown{}
	return &this
}

// GetImageQuality returns the ImageQuality field value if set, zero value otherwise.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) GetImageQuality() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.ImageQuality) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.ImageQuality
}

// GetImageQualityOk returns a tuple with the ImageQuality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) GetImageQualityOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.ImageQuality) {
		return nil, false
	}
	return o.ImageQuality, true
}

// HasImageQuality returns a boolean if a field has been set.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) HasImageQuality() bool {
	if o != nil && !IsNil(o.ImageQuality) {
		return true
	}

	return false
}

// SetImageQuality gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the ImageQuality field.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) SetImageQuality(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.ImageQuality = &v
}

// GetSupportedDocument returns the SupportedDocument field value if set, zero value otherwise.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) GetSupportedDocument() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.SupportedDocument) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.SupportedDocument
}

// GetSupportedDocumentOk returns a tuple with the SupportedDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) GetSupportedDocumentOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.SupportedDocument) {
		return nil, false
	}
	return o.SupportedDocument, true
}

// HasSupportedDocument returns a boolean if a field has been set.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) HasSupportedDocument() bool {
	if o != nil && !IsNil(o.SupportedDocument) {
		return true
	}

	return false
}

// SetSupportedDocument gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the SupportedDocument field.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) SetSupportedDocument(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.SupportedDocument = &v
}

// GetColourPicture returns the ColourPicture field value if set, zero value otherwise.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) GetColourPicture() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.ColourPicture) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.ColourPicture
}

// GetColourPictureOk returns a tuple with the ColourPicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) GetColourPictureOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.ColourPicture) {
		return nil, false
	}
	return o.ColourPicture, true
}

// HasColourPicture returns a boolean if a field has been set.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) HasColourPicture() bool {
	if o != nil && !IsNil(o.ColourPicture) {
		return true
	}

	return false
}

// SetColourPicture gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the ColourPicture field.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) SetColourPicture(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.ColourPicture = &v
}

// GetConclusiveDocumentQuality returns the ConclusiveDocumentQuality field value if set, zero value otherwise.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) GetConclusiveDocumentQuality() DocumentBreakdownDataComparisonBreakdownIssuingCountry {
	if o == nil || IsNil(o.ConclusiveDocumentQuality) {
		var ret DocumentBreakdownDataComparisonBreakdownIssuingCountry
		return ret
	}
	return *o.ConclusiveDocumentQuality
}

// GetConclusiveDocumentQualityOk returns a tuple with the ConclusiveDocumentQuality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) GetConclusiveDocumentQualityOk() (*DocumentBreakdownDataComparisonBreakdownIssuingCountry, bool) {
	if o == nil || IsNil(o.ConclusiveDocumentQuality) {
		return nil, false
	}
	return o.ConclusiveDocumentQuality, true
}

// HasConclusiveDocumentQuality returns a boolean if a field has been set.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) HasConclusiveDocumentQuality() bool {
	if o != nil && !IsNil(o.ConclusiveDocumentQuality) {
		return true
	}

	return false
}

// SetConclusiveDocumentQuality gets a reference to the given DocumentBreakdownDataComparisonBreakdownIssuingCountry and assigns it to the ConclusiveDocumentQuality field.
func (o *RightToWorkBreakdownImageIntegrityBreakdown) SetConclusiveDocumentQuality(v DocumentBreakdownDataComparisonBreakdownIssuingCountry) {
	o.ConclusiveDocumentQuality = &v
}

func (o RightToWorkBreakdownImageIntegrityBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RightToWorkBreakdownImageIntegrityBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ImageQuality) {
		toSerialize["image_quality"] = o.ImageQuality
	}
	if !IsNil(o.SupportedDocument) {
		toSerialize["supported_document"] = o.SupportedDocument
	}
	if !IsNil(o.ColourPicture) {
		toSerialize["colour_picture"] = o.ColourPicture
	}
	if !IsNil(o.ConclusiveDocumentQuality) {
		toSerialize["conclusive_document_quality"] = o.ConclusiveDocumentQuality
	}
	return toSerialize, nil
}

type NullableRightToWorkBreakdownImageIntegrityBreakdown struct {
	value *RightToWorkBreakdownImageIntegrityBreakdown
	isSet bool
}

func (v NullableRightToWorkBreakdownImageIntegrityBreakdown) Get() *RightToWorkBreakdownImageIntegrityBreakdown {
	return v.value
}

func (v *NullableRightToWorkBreakdownImageIntegrityBreakdown) Set(val *RightToWorkBreakdownImageIntegrityBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableRightToWorkBreakdownImageIntegrityBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableRightToWorkBreakdownImageIntegrityBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRightToWorkBreakdownImageIntegrityBreakdown(val *RightToWorkBreakdownImageIntegrityBreakdown) *NullableRightToWorkBreakdownImageIntegrityBreakdown {
	return &NullableRightToWorkBreakdownImageIntegrityBreakdown{value: val, isSet: true}
}

func (v NullableRightToWorkBreakdownImageIntegrityBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRightToWorkBreakdownImageIntegrityBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
